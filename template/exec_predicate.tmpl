{{ define "genrest/exec_predicate"}}
package genrest

import (
	"github.com/gin-gonic/gin"
	"{{$.Config.Package}}"
	"{{$.Config.Package}}/predicate"
)


type Paging struct {
	Limit *int `form:"limit"`
	Page  *int `form:"page"`
}

{{ range $n := $.Nodes }}
{{ range $f := $n.Fields}}
type {{$n.Name}}{{$f.StructField}}OpConf struct {
{{- range $method := opsString (ops $f)}}
	{{$method}} bool
	{{if eq $method "EQ"}}Or bool{{end}}
{{- end}}
}
{{end}}

type {{$n.Name}}QueryConf struct {
	Query *ent.{{$n.Name}}Query
	C *gin.Context
{{ range $i, $f := $n.Fields }}
	{{$f.Name}}OpConf {{$n.Name}}{{$f.StructField}}OpConf
	{{$f.Name}}IsOpen bool
{{end}}
	openPaging bool
}

func (c *{{$n.Name}}QueryConf) OpenPaging() *{{$n.Name}}QueryConf {
	c.openPaging = true
	return c
}

func (c *{{$n.Name}}QueryConf) paging() error {
	bindQuery := Paging{}
	err := c.C.ShouldBindQuery(&bindQuery)
	if err != nil {
		return err
	}
	if bindQuery.Limit != nil && bindQuery.Page != nil {
		c.Query.Limit(*bindQuery.Limit).Offset((*bindQuery.Page - 1) * *bindQuery.Limit)
	}
	return nil
}

{{ range $f := $n.Fields }}
func (c *{{$n.Name}}QueryConf) Set{{$f.StructField}}Conf(conf {{$n.Name}}{{$f.StructField}}OpConf) *{{$n.Name}}QueryConf {
	c.{{$f.Name}}IsOpen = true
	c.{{$f.Name}}OpConf = conf
	return c
}
{{end}}

func (c *{{$n.Name}}QueryConf) Exec() (*ent.{{$n.Name}}Query, error)  {
	if c.openPaging {
		err := c.paging()
		if err != nil {
			return nil, err
		}
	}
	ps := make([]predicate.{{$n.Name}}, 0, 0)
{{ range $f := $n.Fields }}
	{{range $method := opsString (ops $f)}}
	if c.{{$f.Name}}IsOpen {
		if c.{{$f.Name}}OpConf.{{$method}} {
			p, err := Bind{{$n.Name}}{{$f.StructField}}{{$method}}(c.C)
			if err != nil {
				return nil, err
			}
			ps = append(ps, p)
		}
	}
    {{if eq $method "EQ"}}
	{{$method = "Or"}}
	if c.{{$f.Name}}IsOpen {
	    if c.{{$f.Name}}OpConf.{{$method}} {
	        p, err := Bind{{$n.Name}}{{$f.StructField}}{{$method}}(c.C)
	        if err != nil {
	            return nil, err
	        }
	        ps = append(ps, p)
	    }
	}
	{{end}}
	{{end}}
{{end}}
	return c.Query.Where(ps...),nil
}

func {{$n.Name}}QueryByGin(c *gin.Context, query *ent.{{$n.Name}}Query) *{{$n.Name}}QueryConf {
	return &{{$n.Name}}QueryConf{C: c,Query: query}
}
{{end}}
{{end}}