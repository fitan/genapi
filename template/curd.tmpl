{{ define "genrest/curd"}}
package genrest

import (
	"context"
	"fmt"
	"strconv"
	"{{$.Config.Package}}"
	"{{$.Config.Package}}/predicate"
	"github.com/gin-gonic/gin"
{{- range $n := $.Nodes }}
	"{{$.Config.Package}}/{{snake $n.Name}}"
{{- end }}
)

{{ range $n := $.Nodes }}


func newBase{{$n.Name}}CURD(db *ent.Client) *{{$n.Name}}CURD {
	return &{{$n.Name}}CURD{
		Db:      db,
		{{ range $e := $n.Edges}}
		{{$e.Type.Name}}Obj: nil,
		{{ end }}
	}
}


type {{$n.Name}}CURD struct {
	Db     *ent.Client
    {{ range $e := $n.Edges}}
	{{$e.Type.Name}}Obj *{{$e.Type.Name}}CURD
	{{ end }}	
}

func (curd *{{$n.Name}}CURD) RegisterRouter(r *gin.Engine) {
	{{$a := (PaseRestNodeMethod $n.Annotations)}}
	{{range $method, $route := $a}}
	{{if eq $method "Get"}}
	{{$method = "GetOne"}}
	// @Summary get one {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param id path int true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake $n.Name}}/{id} [get]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{$method = "GetList"}}
	// @Summary get list {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param data query {{$n.Name}}Query true " "
	// @Header 200 {string} Count "The total amount"
	// @Success 200 {object} RestReturn{data=Get{{$n.Name}}ListData}
	// @Router /{{snake (plural $n.Name)}} [get]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{end}}
	{{if eq $method "Create"}}
	{{$method = "CreateOne"}}
	// @Summary create one {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param body body {{$n.Name}}NodeNotID true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake $n.Name}} [post]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{$method = "CreateList"}}
	// @Summary create list {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param body body []{{$n.Name}}Node true " "
	// @Success 200 {object} RestReturn{data=[]{{$n.Name}}NodeNotID}
	// @Router /{{snake (plural $n.Name)}} [post]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{end}}
	{{if eq $method "Update"}}
	{{$method = "UpdateOne"}}
	// @Summary update one {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param id path int true " "
	// @Param body body {{$n.Name}}NodeNotID true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake $n.Name}}/{id} [put]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{$method = "UpdateList"}}
	// @Summary update list {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param body body []{{$n.Name}}Node true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake (plural $n.Name)}} [put]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		err := curd.{{$method}}(c)
		RestReturnFunc(c, "", err)
	})
	{{end}}
	{{if eq $method "Delete"}}
	{{$method = "DeleteOne"}}
	// @Summary delete one {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param id path int true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake $n.Name}}/{id} [delete]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{$method = "DeleteList"}}
	// @Summary delete list {{snake $n.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$n.Name}}
	// @Param ids query IdsQuery true " "
	// @Success 200 {object} RestReturn{data={{$n.Name}}Node}
	// @Router /{{snake (plural $n.Name)}} [delete]
	r.{{$route}}(curd.{{$method}}RoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}(c)
		RestReturnFunc(c, data, err)
	})
	{{end}}

	{{end}}
	{{ range $e := $n.Edges}}
	{{$a := (PaseRestEdgeMethod $e.Annotations)}}
	{{range $method, $route := $a}}
	{{if eq (toString $e.Unique) "true"}}
	{{if eq $method "Get"}}
	// @Summary get one {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Success 200 {object} RestReturn{data={{$e.Type.Name}}Node}
	// @Router /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [get]
	{{end}}
	{{if eq $method "Create"}}
	// @Summary create one {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Param body body  {{$e.Type.Name}}NodeNotID true " "
	// @Success 200 {object} RestReturn{data={{$e.Type.Name}}Node}
	// @Router /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [post]
	{{end}}
	{{if eq $method "Delete"}}
	// @Summary delete one {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Success 200 {object} RestReturn{data={{$e.Type.Name}}Node}
	// @Router /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [delete]
	{{end}}
	r.{{$route}}(curd.{{$method}}One{{$e.Type.Name}}By{{$n.Name}}IdRoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}One{{$e.Type.Name}}By{{$n.Name}}Id(c)
		RestReturnFunc(c, data, err)
	})
	{{else}}
	{{if eq $method "Get"}}
	// @Summary get list {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Param query query  {{$e.Type.Name}}Query false " "
	// @Success 200 {object} RestReturn{data=[]{{$e.Type.Name}}Node}
	// @Router /{{snake $n.Name}}/{id}/{{snake (plural $e.Type.Name)}} [get]
	{{end}}
	{{if eq $method "Create"}}
	// @Summary create list {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Param body body  []{{$e.Type.Name}}Node true " "
	// @Success 200 {object} RestReturn{data=[]{{$e.Type.Name}}NodeNotID}
	// @Router /{{snake $n.Name}}/{id}/{{snake (plural $e.Type.Name)}} [post]
	{{end}}
	{{if eq $method "Delete"}}
	// @Summary delete one {{snake $e.Type.Name}}
	// @Accept  json
	// @Produce  json
	// @Tags {{$e.Type.Name}} by {{$n.Name}}
	// @Param id path int true " "
	// @Param query query  {{$e.Type.Name}}Query false " "
	// @Success 200 {object} RestReturn{data={{$e.Type.Name}}Node}
	// @Router /{{snake $n.Name}}/{id}/{{plural (snake $e.Type.Name)}} [delete]
	{{end}}
	r.{{$route}}(curd.{{$method}}List{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath(), func(c *gin.Context) {
		data, err := curd.{{$method}}List{{plural $e.Type.Name}}By{{$n.Name}}Id(c)
		RestReturnFunc(c, data, err)
	})
	{{end}}
	{{end}}
	{{end}}
}

func (curd *{{$n.Name}}CURD) BindId(c *gin.Context) (IdUri, error) {
	id := IdUri{}
	err := c.ShouldBindUri(&id)
	return id, err
}

func (curd *{{$n.Name}}CURD) BindIds(c *gin.Context) (IdsQuery, error) {
	ids := IdsQuery{}
	err := c.ShouldBindQuery(&ids)
	return ids, err

}

func (curd *{{$n.Name}}CURD) BindObj(c *gin.Context) (*ent.{{$n.Name}}, error) {
	body := new(ent.{{$n.Name}})
	err := c.ShouldBindJSON(body)
	return body, err
}

func (curd *{{$n.Name}}CURD) BindObjs(c *gin.Context) (ent.{{plural $n.Name}}, error) {
	body := make(ent.{{plural $n.Name}}, 0, 0)
	err := c.ShouldBindJSON(&body)
	return body, err
}

func (curd *{{$n.Name}}CURD) BindDefaultQuery(c *gin.Context) (*{{$n.Name}}DefaultQuery, error) {
	body := new({{$n.Name}}DefaultQuery)
	err := c.ShouldBindQuery(body)
	return body, err
}

func (curd *{{$n.Name}}CURD)predicateBind(c *gin.Context, fs ...func(c *gin.Context) (predicate.{{$n.Name}}, error)) ([]predicate.{{$n.Name}}, error) {
	ps := make([]predicate.{{$n.Name}},0,len(fs))
	for _, f := range fs {
		p, err := f(c)
		if err != nil {
			return ps,err
		}
		ps = append(ps, p)
	}
	return ps, nil
}

func (curd *{{$n.Name}}CURD) BaseGetOneQueryer(id int) (*ent.{{$n.Name}}Query, error) {
	return curd.Db.{{$n.Name}}.Query().Where({{snake $n.Name}}.IDEQ(id)), nil
}

func (curd *{{$n.Name}}CURD) defaultGetOneQueryer(c *gin.Context) (*ent.{{$n.Name}}Query, error) {
	id, err := curd.BindId(c)
	if err != nil {
		return nil, err
	}
	return curd.BaseGetOneQueryer(id.ID)
}

func (curd *{{$n.Name}}CURD) GetOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}

func (curd *{{$n.Name}}CURD) GetOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	queryer, err := curd.defaultGetOneQueryer(c)
	if err != nil {
		return nil, err
	}
	curd.selete(queryer)
	return queryer.Only(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseGetListCount(query *{{$n.Name}}DefaultQuery) (int, error) {
	queryer := curd.Db.{{$n.Name}}.Query()
	ps, err := query.PredicatesExec()
	if err != nil {
		return 0, err
	}
	return queryer.Where({{snake $n.Name}}.And(ps...)).Count(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseGetListQueryer(query *{{$n.Name}}DefaultQuery) (*ent.{{$n.Name}}Query, error) {
	queryer := curd.Db.{{$n.Name}}.Query()
	err := query.Exec(queryer)
	if err != nil {
		return queryer, err
	}

	curd.selete(queryer)
	curd.defaultOrder(queryer)

	return queryer, nil
}

func (curd *{{$n.Name}}CURD) defaultGetListQueryer(c *gin.Context) (*ent.{{$n.Name}}Query, int,error) {
	query, err := curd.BindDefaultQuery(c)
	if err != nil {
		return nil,0, err
	}

	count, err := curd.BaseGetListCount(query)
	if err != nil {
		return nil,0,err
	}
	queryer, err := curd.BaseGetListQueryer(query)
	if err != nil {
		return nil,0,err
	}
	return queryer, count, nil
}

func (curd *{{$n.Name}}CURD) GetListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}

type Get{{$n.Name}}ListData struct {
	Count int
	Result []*ent.{{$n.Name}}
}

func (curd *{{$n.Name}}CURD) GetList(c *gin.Context) (*Get{{$n.Name}}ListData, error) {
	queryer,count, err := curd.defaultGetListQueryer(c)
	if err != nil {
		return nil, err
	}

	res, err := queryer.All(context.Background())
	if err != nil {
		return nil,err
	}

	return &Get{{$n.Name}}ListData{count, res}, nil
}



func (curd *{{$n.Name}}CURD) createMutation(m *ent.{{$n.Name}}Mutation,v *ent.{{$n.Name}}) {
	{{range $f := $n.Fields}}
	{{if eq (PaseRestFieldOperability $f.Annotations "Create") "true"}}
	m.Set{{$f.StructField}}(v.{{$f.StructField}})
	{{end}}
	{{end}}
}

func (curd *{{$n.Name}}CURD) updateMutation(m *ent.{{$n.Name}}Mutation,v *ent.{{$n.Name}}) {
	{{range $f := $n.Fields}}
	{{if eq (PaseRestFieldOperability $f.Annotations "Update") "true"}}
	m.Set{{$f.StructField}}(v.{{$f.StructField}})
	{{end}}
	{{end}}
}

func (curd *{{$n.Name}}CURD) optionalOrder(c *gin.Context,queryer *ent.UserQuery) error  {
	var expect = map[string]int{
		{{$order := PaseRestNodeOrderOp $n.Annotations}}
		{{range $k := $order.OptionalOrder}}
		"{{$k}}": 0,
		{{end}}
	}
	orderFunc, err := BindOrder(c, expect)
	if err != nil {
		return err
	}
	queryer.Order(orderFunc...)
	return nil
}

func (curd *{{$n.Name}}CURD) defaultOrder(queryer *ent.{{$n.Name}}Query)  {
	queryer.Order([]ent.OrderFunc{
		ent.Asc(
			{{$order := PaseRestNodeOrderOp $n.Annotations}}
			{{range $acs := $order.DefaultAcsOrder}}
			"{{- $acs}}",
			{{end}}
		),
		ent.Desc(
			{{$order = PaseRestNodeOrderOp $n.Annotations}}
			{{range $Desc := $order.DefaultDescOrder}}
			{{$Desc}},
			{{end}}
		),
	}...)
}

func (curd *{{$n.Name}}CURD) selete(queryer *ent.{{$n.Name}}Query) {
	queryer.Select(
	{{range $f := $n.Fields}}
	{{if eq (PaseRestFieldOperability $f.Annotations "Selete") "true"}}
		{{snake $n.Name}}.Field{{$f.StructField}},
	{{end}}
	{{end}}
	)
}

func (curd *{{$n.Name}}CURD) BaseCreateOneCreater(body *ent.{{$n.Name}}) (*ent.{{$n.Name}}Create) {
	creater := curd.Db.{{$n.Name}}.Create()
	curd.createMutation(creater.Mutation(), body)
	return creater
}

func (curd *{{$n.Name}}CURD) defaultCreateOneCreater(c *gin.Context) (*ent.{{$n.Name}}Create, error) {
	body, err := curd.BindObj(c)
	if err != nil {
		return nil, err
	}
	return curd.BaseCreateOneCreater(body), nil
}

func (curd *{{$n.Name}}CURD) CreateOneRoutePath() string {
	return "/{{snake $n.Name}}"
}


func (curd *{{$n.Name}}CURD) CreateOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	creater, err := curd.defaultCreateOneCreater(c)
	if err != nil {
		return nil, err
	}
	return creater.Save(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseCreateList(body ent.{{plural $n.Name}}) (*ent.{{$n.Name}}CreateBulk) {
	return curd.Db.{{$n.Name}}.CreateBulk(curd.BaseCreateListBulk(body)...)
}

func (curd *{{$n.Name}}CURD) BaseCreateListBulk(body ent.{{plural $n.Name}}) ([]*ent.{{$n.Name}}Create) {
	bulk := make([]*ent.{{$n.Name}}Create, 0, len(body))
	for _, v := range body {
		creater := curd.Db.{{$n.Name}}.Create()
		curd.createMutation(creater.Mutation(), v)
		bulk = append(bulk, creater)
	}
	return bulk
}

func (curd *{{$n.Name}}CURD) defaultCreateListBulk(c *gin.Context) ([]*ent.{{$n.Name}}Create, error) {
	body, err := curd.BindObjs(c)
	if err != nil {
		return nil, err
	}
	return curd.BaseCreateListBulk(body),nil
}

func (curd *{{$n.Name}}CURD) CreateListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) CreateList(c *gin.Context) ([]*ent.{{$n.Name}}, error) {
	bulk, err := curd.defaultCreateListBulk(c)
	if err != nil {
		return nil, err
	}
	return curd.Db.{{$n.Name}}.CreateBulk(bulk...).Save(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseUpdateOneUpdater(id int, body *ent.{{$n.Name}}) (*ent.{{$n.Name}}UpdateOne, error) {
	updater := curd.Db.{{$n.Name}}.UpdateOneID(id)
	curd.updateMutation(updater.Mutation(), body)
	return updater, nil
}

func (curd *{{$n.Name}}CURD) defaultUpdateOneUpdater(c *gin.Context) (*ent.{{$n.Name}}UpdateOne, error) {
	id, err := curd.BindId(c)
	if err != nil {
		return nil, err
	}
	body, err := curd.BindObj(c)
	if err != nil {
		return nil, err
	}
	return curd.BaseUpdateOneUpdater(id.ID, body)
}

func (curd *{{$n.Name}}CURD) UpdateOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}


func (curd *{{$n.Name}}CURD) UpdateOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	updater, err := curd.defaultUpdateOneUpdater(c)
	if err != nil {
		return nil, err
	}
	return updater.Save(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseUpdateListUpdater(body ent.{{plural $n.Name}}) (*ent.Tx, error) {
	ctx := context.Background()
	tx, err := curd.Db.Tx(ctx)
	if err != nil {
		return nil, err
	}
	for _, v := range body {
		updater := tx.{{$n.Name}}.UpdateOneID(v.ID)
		curd.updateMutation(updater.Mutation(), v)
		_, err := updater.Save(ctx)
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				return tx, fmt.Errorf("$v: %v", err, rerr)
			}
		}
	}
	return tx, nil
}

func (curd *{{$n.Name}}CURD) defaultUpdateListUpdater(c *gin.Context) (*ent.Tx, error) {
	body, err := curd.BindObjs(c)
	if err != nil {
		return nil, err
	}

	return curd.BaseUpdateListUpdater(body)
}

func (curd *{{$n.Name}}CURD) UpdateListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) UpdateList(c *gin.Context) error {
	tx, err := curd.defaultUpdateListUpdater(c)
	if err != nil {
		return err
	}
	return tx.Commit()
}

func (curd *{{$n.Name}}CURD) BaseDeleteOneDeleter(id int) (*ent.{{$n.Name}}Delete) {
	return curd.Db.{{$n.Name}}.Delete().Where({{snake $n.Name}}.IDEQ(id))
}

func (curd *{{$n.Name}}CURD) defaultDeleteOneDeleter(c *gin.Context) (*ent.{{$n.Name}}Delete, error) {
	id, err := curd.BindId(c)
	if err != nil {
		return nil, err
	}
	return curd.BaseDeleteOneDeleter(id.ID), nil
}

func (curd *{{$n.Name}}CURD) DeleteOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}


func (curd *{{$n.Name}}CURD) DeleteOne(c *gin.Context) (int, error) {
	deleter, err := curd.defaultDeleteOneDeleter(c)
	if err != nil {
		return 0, err
	}
	return deleter.Exec(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseDeleteListDeleter(ids []int) (*ent.{{$n.Name}}Delete) {
	return curd.Db.{{$n.Name}}.Delete().Where({{snake $n.Name}}.IDIn(ids...))
}

func (curd *{{$n.Name}}CURD) defaultDeleteListDeleter(c *gin.Context) (*ent.{{$n.Name}}Delete, error) {
	ids, err := curd.BindIds(c)
	if err != nil {
		return nil, err
	}

	return curd.BaseDeleteListDeleter(ids.Ids), nil
}

func (curd *{{$n.Name}}CURD) DeleteListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) DeleteList(c *gin.Context) (int, error) {
	deleter, err := curd.defaultDeleteListDeleter(c)
	if err != nil {
		return 0, nil
	}
	return deleter.Exec(context.Background())
}

{{ range $e := $n.Edges}}
{{if eq (toString $e.Unique) "true"}}

func (curd *{{$n.Name}}CURD) GetOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}


func (curd *{{$n.Name}}CURD) GetOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (*ent.{{$e.Type.Name}}, error) {
	queryer, err := curd.defaultGetOneQueryer(c)
	if err != nil {
		return nil, err
	}

	return queryer.Query{{$e.Type.Name}}().First(context.Background())
}

func (curd *{{$n.Name}}CURD) CreateOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}


func (curd *{{$n.Name}}CURD) CreateOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (*ent.{{$e.Type.Name}}, error) {
	id, err := curd.BindId(c)
	if err != nil {
		return nil, err
	}

	{{snake $n.Name}}Creater, err := curd.{{$e.Type.Name}}Obj.defaultCreateOneCreater(c)
	return {{snake $n.Name}}Creater.Set{{$n.Name}}ID(id.ID).Save(context.Background())
}

func (curd *{{$n.Name}}CURD) DeleteOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}


func (curd *{{$n.Name}}CURD) DeleteOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (int, error) {
	queryer, err := curd.defaultGetOneQueryer(c)
	if err != nil {
		return 0, err
	}

	id, err := queryer.Query{{$e.Type.Name}}().OnlyID(context.Background())
	if err != nil {
		return 0, err
	}

	return curd.Db.{{$e.Type.Name}}.Delete().Where({{snake $e.Type.Name}}.IDEQ(id)).Exec(context.Background())
}

{{else}}
func (curd *{{$n.Name}}CURD) GetList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake (plural $e.Type.Name)}}"
}


func (curd *{{$n.Name}}CURD) GetList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) ([]*ent.{{$e.Type.Name}}, error) {
	queryer, err := curd.defaultGetOneQueryer(c)
	if err != nil {
		return nil, err
	}

	tmpQueryer := queryer.Query{{plural $e.Type.Name}}()

	query, err := curd.{{$e.Type.Name}}Obj.BindDefaultQuery(c)
	if err != nil {
		return nil, err
	}
	err = query.Exec(tmpQueryer)
	if err != nil {
		return nil, err
	}
	curd.{{$e.Type.Name}}Obj.selete(tmpQueryer)
	curd.{{$e.Type.Name}}Obj.defaultOrder(tmpQueryer)


	return tmpQueryer.All(context.Background())

}

func (curd *{{$n.Name}}CURD) CreateList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake (plural $e.Type.Name)}}"
}

func (curd *{{$n.Name}}CURD) CreateList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) ([]*ent.{{$e.Type.Name}}, error) {
	id, err := curd.BindId(c)
	if err != nil {
		return nil, err
	}
	bulk, err := curd.{{$e.Type.Name}}Obj.defaultCreateListBulk(c)
	if err != nil {
		return nil, err
	}
	for i, _ := range bulk {
		bulk[i].Add{{$n.Name}}IDs(id.ID)
	}
	return curd.Db.{{$e.Type.Name}}.CreateBulk(bulk...).Save(context.Background())
}

func (curd *{{$n.Name}}CURD) DeleteList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{plural (snake $e.Type.Name)}}"
}

func (curd *{{$n.Name}}CURD) DeleteList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (int, error) {
	queryer, err := curd.defaultGetOneQueryer(c)
	if err != nil {
		return 0, err
	}

	query, err := curd.{{$e.Type.Name}}Obj.BindDefaultQuery(c)

	if err != nil {
		return 0, err
	}

	ps, err := query.PredicatesExec()
	if err != nil {
		return 0, err
	}
	ids, err := queryer.Query{{plural $e.Type.Name}}().Where(ps...).IDs(context.Background())
	if err != nil {
		return 0, err
	}

	return curd.Db.{{$e.Type.Name}}.Delete().Where({{snake $e.Type.Name}}.IDIn(ids...)).Exec(context.Background())
}
{{end}}

{{end}}
{{end}}
{{end}}