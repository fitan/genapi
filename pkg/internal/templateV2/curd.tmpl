{{template "pkg_name" $.PkgName}}

import (
	"context"
	"fmt"
	"strconv"
	"{{$.Config.Package}}"
	"{{$.Config.Package}}/predicate"
	"github.com/gin-gonic/gin"
{{- range $n := $.Nodes }}
	"{{$.Config.Package}}/{{lower $n.Name}}"
{{- end }}
)

{{ range $n := $.Nodes }}



type {{$n.Name}}CURD struct {
	Db     *ent.Client
    {{ range $e := $n.Edges}}
	{{$e.Type.Name}}Obj *{{$e.Type.Name}}CURD
	{{ end }}	
}

func (curd *{{$n.Name}}CURD) RegisterRouter(router interface{}) {
	switch router.(type) {
	case *gin.Engine:
	r := router.(*gin.Engine)
	{{template "router" $n}}

	case *gin.RouterGroup:
	r := router.(*gin.RouterGroup)
	{{template "router" $n}}
	}
}

func (curd *{{$n.Name}}CURD) BindObj(c *gin.Context) (*ent.{{$n.Name}}, error) {
	body := new(ent.{{$n.Name}})
	err := c.ShouldBindJSON(body)
	return body, err
}

func (curd *{{$n.Name}}CURD) BindObjs(c *gin.Context) (ent.{{plural $n.Name}}, error) {
	body := make(ent.{{plural $n.Name}}, 0, 0)
	err := c.ShouldBindJSON(&body)
	return body, err
}

func (curd *{{$n.Name}}CURD) BindDefaultQuery(c *gin.Context) (*{{$n.Name}}DefaultQuery, error) {
	body := new({{$n.Name}}DefaultQuery)
	err := c.ShouldBindQuery(body)
	return body, err
}

func (curd *{{$n.Name}}CURD) BaseGetOneQueryer(c *gin.Context) (*ent.{{$n.Name}}Query, error) {
	id, err := BindId(c)
	if err != nil {
		return nil, err
	}
	return curd.Db.{{$n.Name}}.Query().Where({{lower $n.Name}}.IDEQ(id.ID)), nil
}

func (curd *{{$n.Name}}CURD) GetOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}

func (curd *{{$n.Name}}CURD) GetOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	queryer, err := curd.BaseGetOneQueryer(c)
	if err != nil {
		return nil, err
	}
	{{$n.Name}}Selete(queryer)
	return queryer.Only(context.Background())
}

func (curd *{{$n.Name}}CURD) defaultGetListCount(queryer *ent.{{$n.Name}}Query,query *{{$n.Name}}DefaultQuery) (error) {
	ps, err := query.PredicatesExec()
	if err != nil {
		return err
	}
	queryer.Where({{lower $n.Name}}.And(ps...))
    return nil
}

func (curd *{{$n.Name}}CURD) defaultGetListQueryer(queryer *ent.{{$n.Name}}Query,query *{{$n.Name}}DefaultQuery) (error) {
	err := query.Exec(queryer)
	if err != nil {
		return err
	}

	{{$n.Name}}Selete(queryer)
	curd.defaultOrder(queryer)

	return nil
}

func (curd *{{$n.Name}}CURD) BaseGetListQueryer(c *gin.Context) (*ent.{{$n.Name}}Query, *ent.{{$n.Name}}Query,error) {
	query, err := curd.BindDefaultQuery(c)
	if err != nil {
		return nil,nil, err
	}
	countQueryer := curd.Db.{{$n.Name}}.Query()

	err = curd.defaultGetListCount(countQueryer,query)
	if err != nil {
		return nil,nil,err
	}

	getListQueryer := curd.Db.{{$n.Name}}.Query()
	err = curd.defaultGetListQueryer(getListQueryer,query)
	if err != nil {
		return nil,nil,err
	}
	return getListQueryer, countQueryer, nil
}

func (curd *{{$n.Name}}CURD) GetListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}

func (curd *{{$n.Name}}CURD) GetList(c *gin.Context) (*Get{{$n.Name}}ListData, error) {
	getListQueryer,countQueryer, err := curd.BaseGetListQueryer(c)
	if err != nil {
		return nil, err
	}

	bg := context.Background()
	count, err := countQueryer.Count(bg)
	if err != nil {
		return nil,err
	}

	res, err := getListQueryer.All(bg)
	if err != nil {
		return nil,err
	}

	return &Get{{$n.Name}}ListData{count, res}, nil
}

func (curd *{{$n.Name}}CURD) optionalOrder(c *gin.Context,queryer *ent.UserQuery) error  {
	var expect = map[string]int{
		{{$order := PaseRestNodeOrderOp $n.Annotations}}
		{{range $k := $order.OptionalOrder}}
		"{{$k}}": 0,
		{{end}}
	}
	orderFunc, err := BindOrder(c, expect)
	if err != nil {
		return err
	}
	queryer.Order(orderFunc...)
	return nil
}

func (curd *{{$n.Name}}CURD) defaultOrder(queryer *ent.{{$n.Name}}Query)  {
	queryer.Order([]ent.OrderFunc{
		ent.Asc(
			{{$order := PaseRestNodeOrderOp $n.Annotations}}
			{{range $acs := $order.DefaultAcsOrder}}
			"{{- $acs}}",
			{{end}}
		),
		ent.Desc(
			{{$order = PaseRestNodeOrderOp $n.Annotations}}
			{{range $Desc := $order.DefaultDescOrder}}
			{{$Desc}},
			{{end}}
		),
	}...)
}

func (curd *{{$n.Name}}CURD) BaseCreateOneCreater(c *gin.Context) (*ent.{{$n.Name}}Create, error) {
	body, err := curd.BindObj(c)
	if err != nil {
		return nil, err
	}
	creater := curd.Db.{{$n.Name}}.Create()
	{{$n.Name}}CreateMutation(creater.Mutation(), body)
	return creater, nil
}

func (curd *{{$n.Name}}CURD) CreateOneRoutePath() string {
	return "/{{snake $n.Name}}"
}


func (curd *{{$n.Name}}CURD) CreateOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	creater, err := curd.BaseCreateOneCreater(c)
	if err != nil {
		return nil, err
	}
	return creater.Save(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseCreateListBulk(c *gin.Context) ([]*ent.{{$n.Name}}Create,error) {
	body, err := curd.BindObjs(c)
	if err != nil {
		return nil, err
	}
	bulk := make([]*ent.{{$n.Name}}Create, 0, len(body))
	for _, v := range body {
		creater := curd.Db.{{$n.Name}}.Create()
	{{$n.Name}}CreateMutation(creater.Mutation(), v)
		bulk = append(bulk, creater)
	}
	return bulk,nil
}

func (curd *{{$n.Name}}CURD) BaseCreateList(c *gin.Context) (*ent.{{$n.Name}}CreateBulk, error) {
	bulk,err := curd.BaseCreateListBulk(c)
	if err != nil {
		return nil, err
	}
	return curd.Db.{{$n.Name}}.CreateBulk(bulk...),nil
}

func (curd *{{$n.Name}}CURD) CreateListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) CreateList(c *gin.Context) ([]*ent.{{$n.Name}}, error) {
	creater, err := curd.BaseCreateList(c)
	if err != nil {
		return nil, err
	}
	return creater.Save(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseUpdateOneUpdater(c *gin.Context) (*ent.{{$n.Name}}UpdateOne, error) {
	id, err := BindId(c)
	if err != nil {
		return nil, err
	}
	body, err := curd.BindObj(c)
	if err != nil {
		return nil, err
	}
	updater := curd.Db.{{$n.Name}}.UpdateOneID(id.ID)
	{{$n.Name}}UpdateMutation(updater.Mutation(), body)
	return updater, nil
}

func (curd *{{$n.Name}}CURD) UpdateOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}


func (curd *{{$n.Name}}CURD) UpdateOne(c *gin.Context) (*ent.{{$n.Name}}, error) {
	updater, err := curd.BaseUpdateOneUpdater(c)
	if err != nil {
		return nil, err
	}
	return updater.Save(context.Background())
}


func (curd *{{$n.Name}}CURD) BaseUpdateListUpdater(c *gin.Context) (*ent.Tx, error) {
	body, err := curd.BindObjs(c)
	if err != nil {
		return nil, err
	}
	ctx := context.Background()
	tx, err := curd.Db.Tx(ctx)
	if err != nil {
		return nil, err
	}
	for _, v := range body {
		updater := tx.{{$n.Name}}.UpdateOneID(v.ID)
		{{$n.Name}}UpdateMutation(updater.Mutation(), v)
		_, err := updater.Save(ctx)
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				return tx, fmt.Errorf("$v: %v", err, rerr)
			}
		}
	}
	return tx, nil
}

func (curd *{{$n.Name}}CURD) UpdateListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) UpdateList(c *gin.Context) error {
	tx, err := curd.BaseUpdateListUpdater(c)
	if err != nil {
		return err
	}
	return tx.Commit()
}


func (curd *{{$n.Name}}CURD) BaseDeleteOneDeleter(c *gin.Context) (*ent.{{$n.Name}}Delete, error) {
	id, err := BindId(c)
	if err != nil {
		return nil, err
	}
	return curd.Db.{{$n.Name}}.Delete().Where({{lower $n.Name}}.IDEQ(id.ID)), nil
}

func (curd *{{$n.Name}}CURD) DeleteOneRoutePath() string {
	return "/{{snake $n.Name}}/:id"
}


func (curd *{{$n.Name}}CURD) DeleteOne(c *gin.Context) (int, error) {
	deleter, err := curd.BaseDeleteOneDeleter(c)
	if err != nil {
		return 0, err
	}
	return deleter.Exec(context.Background())
}

func (curd *{{$n.Name}}CURD) BaseDeleteListDeleter(c *gin.Context) (*ent.{{$n.Name}}Delete, error) {
	ids, err := BindIds(c)
	if err != nil {
		return nil, err
	}

	return curd.Db.{{$n.Name}}.Delete().Where({{lower $n.Name}}.IDIn(ids.Ids...)), nil
}

func (curd *{{$n.Name}}CURD) DeleteListRoutePath() string {
	return "/{{snake (plural $n.Name)}}"
}


func (curd *{{$n.Name}}CURD) DeleteList(c *gin.Context) (int, error) {
	deleter, err := curd.BaseDeleteListDeleter(c)
	if err != nil {
		return 0, nil
	}
	return deleter.Exec(context.Background())
}

{{ range $e := $n.Edges}}
{{$rel := PaseRelType $e}}
{{if eq $rel.Dest "O"}}

func (curd *{{$n.Name}}CURD) GetOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}


func (curd *{{$n.Name}}CURD) GetOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (*ent.{{$e.Type.Name}}, error) {
	queryer, err := curd.BaseGetOneQueryer(c)
	if err != nil {
		return nil, err
	}

	return queryer.Query{{$e.Type.Name}}().First(context.Background())
}


// {{$e.Rel.Type}}
func (curd *{{$n.Name}}CURD) CreateOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}

func (curd *{{$n.Name}}CURD) CreateOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (*ent.{{$e.Type.Name}}, error) {
	id, err := BindId(c)
	if err != nil {
		return nil, err
	}

	{{snake $e.Type.Name}}Creater, err := curd.{{$e.Type.Name}}Obj.BaseCreateOneCreater(c)
	if err != nil {
		return nil, err
	}
	return {{snake $e.Type.Name}}Creater.{{if eq $rel.Src "M"}}Add{{$n.Name}}IDs(id.ID){{else}}Set{{$n.Name}}ID(id.ID){{end}}.Save(context.Background())
}


func (curd *{{$n.Name}}CURD) DeleteOne{{$e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake $e.Type.Name}}"
}


func (curd *{{$n.Name}}CURD) DeleteOne{{$e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (int, error) {
	queryer, err := curd.BaseGetOneQueryer(c)
	if err != nil {
		return 0, err
	}

	id, err := queryer.Query{{$e.Type.Name}}().OnlyID(context.Background())
	if err != nil {
		return 0, err
	}

	return curd.Db.{{$e.Type.Name}}.Delete().Where({{lower $e.Type.Name}}.IDEQ(id)).Exec(context.Background())
}

{{else}}
func (curd *{{$n.Name}}CURD) GetList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake (plural $e.Type.Name)}}"
}


func (curd *{{$n.Name}}CURD) GetList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) ([]*ent.{{$e.Type.Name}}, error) {
	queryer, err := curd.BaseGetOneQueryer(c)
	if err != nil {
		return nil, err
	}

	tmpQueryer := queryer.Query{{plural $e.Type.Name}}()

	query, err := curd.{{$e.Type.Name}}Obj.BindDefaultQuery(c)
	if err != nil {
		return nil, err
	}
	err = query.Exec(tmpQueryer)
	if err != nil {
		return nil, err
	}
	{{$e.Type.Name}}Selete(tmpQueryer)
	curd.{{$e.Type.Name}}Obj.defaultOrder(tmpQueryer)


	return tmpQueryer.All(context.Background())

}

// {{$e.Rel.Type}}
func (curd *{{$n.Name}}CURD) CreateList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{snake (plural $e.Type.Name)}}"
}

func (curd *{{$n.Name}}CURD) CreateList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) ([]*ent.{{$e.Type.Name}}, error) {
	id, err := BindId(c)
	if err != nil {
		return nil, err
	}
	bulk, err := curd.{{$e.Type.Name}}Obj.BaseCreateListBulk(c)
	if err != nil {
		return nil, err
	}
	bg := context.Background()
	tx, err := curd.Db.Tx(bg)
	if err != nil {
		return nil, err
	}

	{{snake (plural $e.Type.Name)}}, err := func() ([]*ent.{{$e.Type.Name}},error) {
		if err != nil {
			return nil ,err
		}
		{{snake (plural $e.Type.Name)}}, err := tx.{{$e.Type.Name}}.CreateBulk(bulk...).Save(bg)
		if err != nil {
			return nil, err
		}
		_,err = tx.{{$n.Name}}.UpdateOneID(id.ID).Add{{plural $e.Type.Name}}({{snake (plural $e.Type.Name)}}...).Save(bg)
		if err != nil {
			return nil, err
		}

		return {{snake (plural $e.Type.Name)}},nil
	}()
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("%v: %v", err, rerr)
		}
		return nil, err
	}
	return {{snake (plural $e.Type.Name)}}, tx.Commit()
}

func (curd *{{$n.Name}}CURD) DeleteList{{plural $e.Type.Name}}By{{$n.Name}}IdRoutePath() string {
	return "/{{snake $n.Name}}/:id/{{plural (snake $e.Type.Name)}}"
}

func (curd *{{$n.Name}}CURD) DeleteList{{plural $e.Type.Name}}By{{$n.Name}}Id(c *gin.Context) (int, error) {
	queryer, err := curd.BaseGetOneQueryer(c)
	if err != nil {
		return 0, err
	}

	query, err := curd.{{$e.Type.Name}}Obj.BindDefaultQuery(c)

	if err != nil {
		return 0, err
	}

	ps, err := query.PredicatesExec()
	if err != nil {
		return 0, err
	}
	ids, err := queryer.Query{{plural $e.Type.Name}}().Where(ps...).IDs(context.Background())
	if err != nil {
		return 0, err
	}

	return curd.Db.{{$e.Type.Name}}.Delete().Where({{lower $e.Type.Name}}.IDIn(ids...)).Exec(context.Background())
}
{{end}}
{{end}}

{{end}}