{{template "pkg_name" $.PkgName}}

import (
	"{{$.Config.Package}}"
	"github.com/gin-gonic/gin"
)

{{ range $n := $.Nodes }}
{{$methodOp := (PaseRestNodeMethod $n.Annotations)}}

type GetOne{{$n.Name}}In struct {
	Uri {{$n.Name}}ID `json:"uri"`
}

{{range $comment := $methodOp.GetOne.Comments}}
// {{$comment}}
{{- end}}{{ if CheckMethodHasSwitch $methodOp.GetOne.Has}}
// @GenApi /{{snake $n.Name}}/{id} [get] {{$methodOp.GetOne.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func GetOne{{$n.Name}}(c *gin.Context, in *GetOne{{$n.Name}}In) (*ent.{{$n.Name}}, error) {
	return Get{{$n.Name}}CURD().GetOne(in.Uri.ID)
}

type GetList{{$n.Name}}In struct {
	Query {{$n.Name}}QueryOption `json:"query"`
}

{{range $comment := $methodOp.GetList.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.GetList.Has}}
// @GenApi /{{plural (snake $n.Name)}} [get] {{$methodOp.GetList.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func GetList{{$n.Name}}(c *gin.Context, in *GetList{{$n.Name}}In) (*Get{{$n.Name}}ListData, error) {
	return Get{{$n.Name}}CURD().GetList(&in.Query)
}

type CreateOne{{$n.Name}}In struct {
	Body ent.{{$n.Name}} `json:"body"`
}

{{range $comment := $methodOp.CreateOne.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.CreateOne.Has}}	
// @GenApi /{{snake $n.Name}} [post] {{$methodOp.CreateOne.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func CreateOne{{$n.Name}}(c *gin.Context, in *CreateOne{{$n.Name}}In) (*ent.{{$n.Name}}, error) {
	return Get{{$n.Name}}CURD().CreateOne(Get{{$n.Name}}CURD().GetCreater(),&in.Body)
}

type CreateList{{$n.Name}}In struct {
	Body ent.{{$n.Name}}s `json:"body"`
}

{{range $comment := $methodOp.CreateList.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.CreateList.Has}}
// @GenApi /{{plural (snake $n.Name)}} [post] {{$methodOp.CreateList.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func CreateList{{$n.Name}}(c *gin.Context, in *CreateList{{$n.Name}}In) (ent.{{$n.Name}}s, error) {
	return Get{{$n.Name}}CURD().CreateList(Get{{$n.Name}}CURD().GetClient(),in.Body)
}

type UpdateOne{{$n.Name}}In struct {
	Uri {{$n.Name}}ID `json:"uri"`
	Body ent.{{$n.Name}} `json:"body"`
}

{{range $comment := $methodOp.UpdateOne.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.UpdateOne.Has}}	
// @GenApi /{{snake $n.Name}}/{id} [put] {{$methodOp.UpdateOne.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func UpdateOne{{$n.Name}}(c *gin.Context, in *UpdateOne{{$n.Name}}In) (*ent.{{$n.Name}}, error) {
	return Get{{$n.Name}}CURD().UpdateOne(Get{{$n.Name}}CURD().GetUpdaterById(in.Uri.ID),&in.Body)
}

type UpdateList{{$n.Name}}In struct {
	Body ent.{{$n.Name}}s `json:"body"`
}

{{range $comment := $methodOp.UpdateList.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.UpdateList.Has}}
// @GenApi /{{plural (snake $n.Name)}} [put] {{$methodOp.UpdateList.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func UpdateList{{$n.Name}}(c *gin.Context, in *UpdateList{{$n.Name}}In) (bool, error) {
    tx, _, err := GetAlertCURD().GetTx()
	if err != nil {
		return false, err
	}
	err = Get{{$n.Name}}CURD().UpdateList(tx,in.Body)
	if err != nil {
		return false, rollback(tx, err)
	}

	return true, tx.Commit()
}

type DeleteOne{{$n.Name}}In struct {
	Uri {{$n.Name}}ID `json:"uri"`
}

{{range $comment := $methodOp.DeleteOne.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.DeleteOne.Has}}	
// @GenApi /{{snake $n.Name}}/{id} [delete] {{$methodOp.DeleteOne.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func DeleteOne{{$n.Name}}(c *gin.Context, in *DeleteOne{{$n.Name}}In) (int, error) {
	return Get{{$n.Name}}CURD().DeleteOne(Get{{$n.Name}}CURD().GetDeleter(),in.Uri.ID)
}

type DeleteList{{$n.Name}}In struct {
	Query {{$n.Name}}IDs `json:"query"`
}

{{range $comment := $methodOp.DeleteList.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.DeleteList.Has}}
// @GenApi /{{plural (snake $n.Name)}} [delete] {{$methodOp.DeleteList.RouterTag}} {{end}}
// @Tags {{$n.Name}}
func DeleteList{{$n.Name}}(c *gin.Context, in *DeleteList{{$n.Name}}In) (int, error) {
	return Get{{$n.Name}}CURD().DeleteList(Get{{$n.Name}}CURD().GetDeleter(),in.Query.IDs)
}
{{ range $e := $n.Edges}}
{{/*{{if ne $e.Type.Name $n.Name}}*/}}
{{$rel := PaseRelType $e}}
// action {{$e.Type.Name}} by {{$n.Name}}
{{$methodOp := (PaseRestEdgeMethod $e.Annotations)}}
{{if eq $rel.Dest "O"}}

{{range $comment := $methodOp.Get.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Get.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [get] {{$methodOp.Get.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func GetOne{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *GetOne{{$n.Name}}In) (*ent.{{$e.Type.Name}}, error) {
    return Get{{$n.Name}}CURD().GetOne{{pascal $e.Name}}By{{$n.Name}}Id(in.Uri.ID)
}
{{if eq $e.Inverse ""}}
type CreateOne{{pascal $e.Name}}By{{$n.Name}}IdIn struct {
	Uri {{$n.Name}}ID `json:"uri"`
	Body ent.{{$e.Type.Name}} `json:"body"`
}

{{range $comment := $methodOp.Create.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Create.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [post] {{$methodOp.Create.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func CreateOne{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *CreateOne{{pascal $e.Name}}By{{$n.Name}}IdIn) (*ent.{{$e.Type.Name}}, error) {
    tx, _ , err := Get{{$n.Name}}CURD().GetTx()
	if err != nil {
		return nil, err
	}
	save, err := Get{{$n.Name}}CURD().CreateOne{{pascal $e.Name}}By{{$n.Name}}Id(tx, in.Uri.ID, &in.Body)
	if err != nil {
		return save, rollback(tx, err)
	}

	return save, tx.Commit()
}
{{end}}

{{range $comment := $methodOp.Delete.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Delete.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{snake $e.Type.Name}} [delete] {{$methodOp.Delete.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func DeleteOne{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *GetOne{{$n.Name}}In) (int, error) {
	return Get{{$n.Name}}CURD().DeleteOne{{pascal $e.Name}}By{{$n.Name}}Id(Get{{$e.Type.Name}}CURD().GetDeleter(),in.Uri.ID)
}
{{else}}
type GetList{{pascal $e.Name}}By{{$n.Name}}IdIn struct {
	Uri {{$n.Name}}ID `json:"uri"`
	Query {{$e.Type.Name}}QueryOption `json:"query"`
}

{{range $comment := $methodOp.Get.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Get.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{plural (snake $e.Type.Name)}} [get] {{$methodOp.Get.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func GetList{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *GetList{{pascal $e.Name}}By{{$n.Name}}IdIn) (*Get{{$e.Type.Name}}ListData, error) {
	return Get{{$n.Name}}CURD().GetList{{pascal $e.Name}}By{{$n.Name}}Id(in.Uri.ID, &in.Query)
}
{{if eq $e.Inverse ""}}
type CreateList{{pascal $e.Name}}By{{$n.Name}}IdIn struct {
	Uri {{$n.Name}}ID `json:"uri"`
	Body ent.{{$e.Type.Name}}s `json:"body"`
}
	
{{range $comment := $methodOp.Create.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Create.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{plural (snake $e.Type.Name)}} [post] {{$methodOp.Create.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func CreateList{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *CreateList{{pascal $e.Name}}By{{$n.Name}}IdIn) (ent.{{$e.Type.Name}}s, error) {
	tx,_, err := GetUserCURD().GetTx()
	if err != nil {
		return nil, err
	}
	save, err := Get{{$n.Name}}CURD().CreateList{{pascal $e.Name}}By{{$n.Name}}Id(tx,in.Uri.ID, in.Body)
	if err != nil {
		return save, rollback(tx, err)
	}

	return save, tx.Commit()
}
{{end}}

type DeleteList{{pascal $e.Name}}By{{$n.Name}}IdIn struct {
	Uri {{$n.Name}}ID `json:"uri"`
	Query {{$e.Type.Name}}QueryOption `json:"query"`
}
	
{{range $comment := $methodOp.Delete.Comments}}
// {{$comment}}
{{- end}} {{ if CheckMethodHasSwitch $methodOp.Delete.Has}}
// @GenApi /{{snake $n.Name}}/{id}/{{plural (snake $e.Type.Name)}} [delete] {{$methodOp.Delete.RouterTag}} {{end}}
// @Tags {{pascal $e.Name}}By{{$n.Name}}
func DeleteList{{pascal $e.Name}}By{{$n.Name}}Id(c *gin.Context, in *DeleteList{{pascal $e.Name}}By{{$n.Name}}IdIn) (int, error) {
	return Get{{$n.Name}}CURD().DeleteList{{pascal $e.Name}}By{{$n.Name}}Id(Get{{$e.Type.Name}}CURD().GetDeleter(),in.Uri.ID, &in.Query)
}
{{end}}
{{end}}

{{end}}
{{/*{{end}}*/}}
