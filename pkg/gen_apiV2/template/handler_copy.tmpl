{{template "pkg_name" $.PkgName}}
import (
"github.com/gin-gonic/gin"
)

{{range $index, $fc := $.Funcs}}
    {{if (and $fc.Bind.Body.Has (eq $fc.Bind.Body.QuoteType "struct")) }}
    type {{$fc.Bind.Body.SwagStructName}} {{$fc.Bind.Body.SwagRaw}}
    {{end}}
    {{if (and $fc.Bind.Query.Has (eq $fc.Bind.Query.QuoteType "struct")) }}
        type {{$fc.Bind.Query.SwagStructName}} {{$fc.Bind.Query.SwagRaw}}
    {{end}}
    {{if (and $fc.Bind.Header.Has (eq $fc.Bind.Header.QuoteType "struct")) }}
        type {{$fc.Bind.Header.SwagStructName}} {{$fc.Bind.Header.SwagRaw}}
    {{end}}    

    // @Accept  json
    // @Produce  json{{if $fc.Bind.HasBody}}
        // @Param body body {{$fc.Bind.QuoteBody}} true " "
    {{- end}}{{if $fc.Bind.HasQuery}}
        // @Param query query {{$fc.Bind.QuoteQuery}} false " "
    {{- end}}{{if $fc.Bind.HasUri}}
        {{- range $fieldTag := $fc.Bind.Uri.Param}}
            // @Param {{$fieldTag.TagName}} path int true " "
        {{- end}}{{if $fc.Bind.HasHeader}}
            {{- range $fieldTag := $msg.In.InHas.HeaderMsg.FieldTags}}
                // @Param {{$fieldTag.TagName}} header string false " "
            {{- end}}
        {{- end}}
    {{- end}}
    // @Success 200 {object} Result{data={{$msg.Out.RawName}}}
    {{$msg.FuncRouter.SwagRouter}}
    func {{$funcName}}(c *gin.Context) (data interface{},err error) {
    {{if $msg.In.ObjectMsg.IsSelector}}
        in := &{{$msg.In.ObjectMsg.SelectorX}}.{{$msg.In.ObjectMsg.SelectorSel}}{}
    {{else}}
        in := &{{$msg.In.ObjectMsg.PkgName}}.{{$msg.In.ObjectMsg.SelectorSel}}{}
    {{end}}
    {{if $fc.Bind.Body.Has}}
        err = c.ShouldBindJSON(&in.Body)
        if err != nil {
        return nil, err
        }
    {{end}}
    {{if $fc.Bind.Uri.Has}}
        err = c.ShouldBindUri(&in.Uri)
        if err != nil {
        return nil, err
        }
    {{end}}
    {{if $fc.Bind.Header.Has}}
        err = c.ShouldBindHeader(&in.Header)
        if err != nil {
        return nil, err
        }
    {{end}}
    {{if $fc.Bind.Query.Has}}
        err = c.ShouldBindQuery(&in.Query)
        if err != nil {
        return nil, err
        }
    {{end}}


    return {{$.PkgName}}.{{$fc.FuncName}}(c, in)
    }
{{end}}