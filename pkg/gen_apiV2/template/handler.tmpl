{{template "pkg_name" $.PkgName}}
import (
	"github.com/gin-gonic/gin"
	{{range $index, $fc := $.Funcs}}
	{{range $tmp := $fc.Plugins}}
	{{if $tmp.Has}}
	{{$tmp.BindAfter.ImportPath}}
	{{$tmp.BindBefor.ImportPath}}
	{{end}}
	{{end}}
	{{end}}
)

{{range $index, $fc := $.Funcs}}
{{if (and $fc.Bind.Body.Has (eq $fc.Bind.Body.QuoteType "struct")) }}
type {{$fc.Bind.Body.SwagStructName}} {{$fc.Bind.Body.SwagRaw}}
{{end}}
{{if (and $fc.Bind.Query.Has (eq $fc.Bind.Query.QuoteType "struct")) }}
type {{$fc.Bind.Query.SwagStructName}} {{$fc.Bind.Query.SwagRaw}}
{{end}}

// @Accept  json
// @Produce  json{{if $fc.Bind.Body.Has}}
// @Param body body {{$fc.Bind.Body.SwagObj}} true "{{$fc.Bind.Body.Comment}} "
{{- end}}{{if $fc.Bind.Query.Has}}
// @Param query query {{$fc.Bind.Query.SwagObj}} false "{{$fc.Bind.Query.Comment}} "
{{- end}}{{if $fc.Bind.Uri.Has}}
{{- range $TagMsg := $fc.Bind.Uri.TagMsgs}}
// @Param {{$TagMsg.TagValue}} path string true "{{$TagMsg.Comment}} "
{{- end}}{{if $fc.Bind.Header.Has}}
{{- range $TagMsg := $fc.Bind.Header.TagMsgs}}
// @Param {{$TagMsg.TagValue}} header string false "{{$TagMsg.Comment}} "
{{- end}}
{{- end}}
{{- end}}
// @Success 200 {object} {{$.BaseConf.Wrap.WrapRes}}{data={{$fc.ResOut0}}}{{range $index, $comment := $fc.Comments}}
{{$comment }}
{{- end}}
func {{$fc.FuncName}}(c *gin.Context) (data interface{},err error) {
	{{range $tmp := $fc.Plugins}}
	{{if $tmp.Has}}
	{{$tmp.BindBefor.Template}}
	{{end}}
	{{end}}

	in := &{{$fc.ParamIn1}}{}
	{{if $fc.Bind.Body.Has}}
	err = c.ShouldBindJSON(&in.Body)
	if err != nil {
		return nil, err
	}
	{{end}}
	{{if $fc.Bind.Uri.Has}}
	err = c.ShouldBindUri(&in.Uri)
	if err != nil {
		return nil, err
	}
	{{end}}
	{{if $fc.Bind.Header.Has}}
	err = c.ShouldBindHeader(&in.Header)
	if err != nil {
		return nil, err
	}
	{{end}}
	{{if $fc.Bind.Query.Has}}
	err = c.ShouldBindQuery(&in.Query)
	if err != nil {
		return nil, err
	}
	{{end}}

	{{range $tmp := $fc.Plugins}}
	{{if $tmp.Has}}
	{{$tmp.BindAfter.Template}}
	{{end}}
	{{end}}

	return {{$fc.PkgName}}.{{$fc.FuncName}}(c, in)
}
{{end}}