// Code generated by entc, DO NOT EDIT.

package server

import (
	"fmt"
)

const (
	// Label holds the string label denoting the server type in the database.
	Label = "server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldMachineType holds the string denoting the machine_type field in the database.
	FieldMachineType = "machine_type"
	// FieldPlatformType holds the string denoting the platform_type field in the database.
	FieldPlatformType = "platform_type"
	// FieldSystemType holds the string denoting the system_type field in the database.
	FieldSystemType = "system_type"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"

	// Table holds the table name of the server in the database.
	Table = "servers"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "servers"
	// OwnerInverseTable is the table name for the ServiceTree entity.
	// It exists in this package in order to avoid circular dependency with the "servicetree" package.
	OwnerInverseTable = "service_trees"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "service_tree_servers"
)

// Columns holds all SQL columns for server fields.
var Columns = []string{
	FieldID,
	FieldIP,
	FieldMachineType,
	FieldPlatformType,
	FieldSystemType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Server type.
var ForeignKeys = []string{
	"service_tree_servers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// MachineType defines the type for the "machine_type" enum field.
type MachineType string

// MachineType values.
const (
	MachineTypePhysical MachineType = "physical"
	MachineTypeVirtual  MachineType = "virtual"
)

func (mt MachineType) String() string {
	return string(mt)
}

// MachineTypeValidator is a validator for the "machine_type" field enum values. It is called by the builders before save.
func MachineTypeValidator(mt MachineType) error {
	switch mt {
	case MachineTypePhysical, MachineTypeVirtual:
		return nil
	default:
		return fmt.Errorf("server: invalid enum value for machine_type field: %q", mt)
	}
}

// PlatformType defines the type for the "platform_type" enum field.
type PlatformType string

// PlatformType values.
const (
	PlatformTypeZstack    PlatformType = "zstack"
	PlatformTypeK8s       PlatformType = "k8s"
	PlatformTypeOpenstack PlatformType = "openstack"
)

func (pt PlatformType) String() string {
	return string(pt)
}

// PlatformTypeValidator is a validator for the "platform_type" field enum values. It is called by the builders before save.
func PlatformTypeValidator(pt PlatformType) error {
	switch pt {
	case PlatformTypeZstack, PlatformTypeK8s, PlatformTypeOpenstack:
		return nil
	default:
		return fmt.Errorf("server: invalid enum value for platform_type field: %q", pt)
	}
}

// SystemType defines the type for the "system_type" enum field.
type SystemType string

// SystemType values.
const (
	SystemTypeLinux   SystemType = "linux"
	SystemTypeWindows SystemType = "windows"
)

func (st SystemType) String() string {
	return string(st)
}

// SystemTypeValidator is a validator for the "system_type" field enum values. It is called by the builders before save.
func SystemTypeValidator(st SystemType) error {
	switch st {
	case SystemTypeLinux, SystemTypeWindows:
		return nil
	default:
		return fmt.Errorf("server: invalid enum value for system_type field: %q", st)
	}
}
