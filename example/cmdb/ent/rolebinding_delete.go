// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/predicate"
	"cmdb/ent/rolebinding"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleBindingDelete is the builder for deleting a RoleBinding entity.
type RoleBindingDelete struct {
	config
	hooks    []Hook
	mutation *RoleBindingMutation
}

// Where adds a new predicate to the RoleBindingDelete builder.
func (rbd *RoleBindingDelete) Where(ps ...predicate.RoleBinding) *RoleBindingDelete {
	rbd.mutation.predicates = append(rbd.mutation.predicates, ps...)
	return rbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rbd *RoleBindingDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rbd.hooks) == 0 {
		affected, err = rbd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rbd.mutation = mutation
			affected, err = rbd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rbd.hooks) - 1; i >= 0; i-- {
			mut = rbd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbd *RoleBindingDelete) ExecX(ctx context.Context) int {
	n, err := rbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rbd *RoleBindingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: rolebinding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		},
	}
	if ps := rbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, rbd.driver, _spec)
}

// RoleBindingDeleteOne is the builder for deleting a single RoleBinding entity.
type RoleBindingDeleteOne struct {
	rbd *RoleBindingDelete
}

// Exec executes the deletion query.
func (rbdo *RoleBindingDeleteOne) Exec(ctx context.Context) error {
	n, err := rbdo.rbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rolebinding.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rbdo *RoleBindingDeleteOne) ExecX(ctx context.Context) {
	rbdo.rbd.ExecX(ctx)
}
