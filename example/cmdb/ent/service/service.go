// Code generated by entc, DO NOT EDIT.

package service

import (
	"time"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeRoleBindings holds the string denoting the role_bindings edge name in mutations.
	EdgeRoleBindings = "role_bindings"
	// EdgeServers holds the string denoting the servers edge name in mutations.
	EdgeServers = "servers"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the service in the database.
	Table = "services"
	// RoleBindingsTable is the table the holds the role_bindings relation/edge.
	RoleBindingsTable = "role_bindings"
	// RoleBindingsInverseTable is the table name for the RoleBinding entity.
	// It exists in this package in order to avoid circular dependency with the "rolebinding" package.
	RoleBindingsInverseTable = "role_bindings"
	// RoleBindingsColumn is the table column denoting the role_bindings relation/edge.
	RoleBindingsColumn = "service_role_bindings"
	// ServersTable is the table the holds the servers relation/edge. The primary key declared below.
	ServersTable = "service_servers"
	// ServersInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	ServersInverseTable = "servers"
	// ProjectTable is the table the holds the project relation/edge.
	ProjectTable = "services"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_services"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_services",
}

var (
	// ServersPrimaryKey and ServersColumn2 are the table columns denoting the
	// primary key for the servers relation (M2M).
	ServersPrimaryKey = []string{"service_id", "server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
