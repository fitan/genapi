// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/server"
	"cmdb/ent/servicetree"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// MachineType holds the value of the "machine_type" field.
	MachineType server.MachineType `json:"machine_type,omitempty"`
	// PlatformType holds the value of the "platform_type" field.
	PlatformType server.PlatformType `json:"platform_type,omitempty"`
	// SystemType holds the value of the "system_type" field.
	SystemType server.SystemType `json:"system_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerQuery when eager-loading is set.
	Edges                ServerEdges `json:"edges"`
	service_tree_servers *int
}

// ServerEdges holds the relations/edges for other nodes in the graph.
type ServerEdges struct {
	// Owner holds the value of the owner edge.
	Owner *ServiceTree `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerEdges) OwnerOrErr() (*ServiceTree, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: servicetree.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			values[i] = &sql.NullInt64{}
		case server.FieldIP, server.FieldMachineType, server.FieldPlatformType, server.FieldSystemType:
			values[i] = &sql.NullString{}
		case server.ForeignKeys[0]: // service_tree_servers
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Server", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case server.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case server.FieldMachineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machine_type", values[i])
			} else if value.Valid {
				s.MachineType = server.MachineType(value.String)
			}
		case server.FieldPlatformType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_type", values[i])
			} else if value.Valid {
				s.PlatformType = server.PlatformType(value.String)
			}
		case server.FieldSystemType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_type", values[i])
			} else if value.Valid {
				s.SystemType = server.SystemType(value.String)
			}
		case server.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field service_tree_servers", value)
			} else if value.Valid {
				s.service_tree_servers = new(int)
				*s.service_tree_servers = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Server entity.
func (s *Server) QueryOwner() *ServiceTreeQuery {
	return (&ServerClient{config: s.config}).QueryOwner(s)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return (&ServerClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Server is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", machine_type=")
	builder.WriteString(fmt.Sprintf("%v", s.MachineType))
	builder.WriteString(", platform_type=")
	builder.WriteString(fmt.Sprintf("%v", s.PlatformType))
	builder.WriteString(", system_type=")
	builder.WriteString(fmt.Sprintf("%v", s.SystemType))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server

func (s Servers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
