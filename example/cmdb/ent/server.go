// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/server"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// MachineType holds the value of the "machine_type" field.
	MachineType server.MachineType `json:"machine_type,omitempty"`
	// PlatformType holds the value of the "platform_type" field.
	PlatformType server.PlatformType `json:"platform_type,omitempty"`
	// SystemType holds the value of the "system_type" field.
	SystemType server.SystemType `json:"system_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerQuery when eager-loading is set.
	Edges ServerEdges `json:"edges"`
}

// ServerEdges holds the relations/edges for other nodes in the graph.
type ServerEdges struct {
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e ServerEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[0] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			values[i] = &sql.NullInt64{}
		case server.FieldIP, server.FieldMachineType, server.FieldPlatformType, server.FieldSystemType:
			values[i] = &sql.NullString{}
		case server.FieldCreateTime, server.FieldUpdateTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Server", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case server.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case server.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case server.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case server.FieldMachineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machine_type", values[i])
			} else if value.Valid {
				s.MachineType = server.MachineType(value.String)
			}
		case server.FieldPlatformType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_type", values[i])
			} else if value.Valid {
				s.PlatformType = server.PlatformType(value.String)
			}
		case server.FieldSystemType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_type", values[i])
			} else if value.Valid {
				s.SystemType = server.SystemType(value.String)
			}
		}
	}
	return nil
}

// QueryServices queries the "services" edge of the Server entity.
func (s *Server) QueryServices() *ServiceQuery {
	return (&ServerClient{config: s.config}).QueryServices(s)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return (&ServerClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Server is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", machine_type=")
	builder.WriteString(fmt.Sprintf("%v", s.MachineType))
	builder.WriteString(", platform_type=")
	builder.WriteString(fmt.Sprintf("%v", s.PlatformType))
	builder.WriteString(", system_type=")
	builder.WriteString(fmt.Sprintf("%v", s.SystemType))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server

func (s Servers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
