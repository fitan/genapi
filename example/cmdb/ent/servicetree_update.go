// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/predicate"
	"cmdb/ent/server"
	"cmdb/ent/servicetree"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceTreeUpdate is the builder for updating ServiceTree entities.
type ServiceTreeUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceTreeMutation
}

// Where appends a list predicates to the ServiceTreeUpdate builder.
func (stu *ServiceTreeUpdate) Where(ps ...predicate.ServiceTree) *ServiceTreeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *ServiceTreeUpdate) SetName(s string) *ServiceTreeUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetNote sets the "note" field.
func (stu *ServiceTreeUpdate) SetNote(s string) *ServiceTreeUpdate {
	stu.mutation.SetNote(s)
	return stu
}

// SetType sets the "type" field.
func (stu *ServiceTreeUpdate) SetType(s servicetree.Type) *ServiceTreeUpdate {
	stu.mutation.SetType(s)
	return stu
}

// SetProjectID sets the "project" edge to the ServiceTree entity by ID.
func (stu *ServiceTreeUpdate) SetProjectID(id int) *ServiceTreeUpdate {
	stu.mutation.SetProjectID(id)
	return stu
}

// SetNillableProjectID sets the "project" edge to the ServiceTree entity by ID if the given value is not nil.
func (stu *ServiceTreeUpdate) SetNillableProjectID(id *int) *ServiceTreeUpdate {
	if id != nil {
		stu = stu.SetProjectID(*id)
	}
	return stu
}

// SetProject sets the "project" edge to the ServiceTree entity.
func (stu *ServiceTreeUpdate) SetProject(s *ServiceTree) *ServiceTreeUpdate {
	return stu.SetProjectID(s.ID)
}

// AddServiceIDs adds the "service" edge to the ServiceTree entity by IDs.
func (stu *ServiceTreeUpdate) AddServiceIDs(ids ...int) *ServiceTreeUpdate {
	stu.mutation.AddServiceIDs(ids...)
	return stu
}

// AddService adds the "service" edges to the ServiceTree entity.
func (stu *ServiceTreeUpdate) AddService(s ...*ServiceTree) *ServiceTreeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddServiceIDs(ids...)
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (stu *ServiceTreeUpdate) AddServerIDs(ids ...int) *ServiceTreeUpdate {
	stu.mutation.AddServerIDs(ids...)
	return stu
}

// AddServers adds the "servers" edges to the Server entity.
func (stu *ServiceTreeUpdate) AddServers(s ...*Server) *ServiceTreeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddServerIDs(ids...)
}

// Mutation returns the ServiceTreeMutation object of the builder.
func (stu *ServiceTreeUpdate) Mutation() *ServiceTreeMutation {
	return stu.mutation
}

// ClearProject clears the "project" edge to the ServiceTree entity.
func (stu *ServiceTreeUpdate) ClearProject() *ServiceTreeUpdate {
	stu.mutation.ClearProject()
	return stu
}

// ClearService clears all "service" edges to the ServiceTree entity.
func (stu *ServiceTreeUpdate) ClearService() *ServiceTreeUpdate {
	stu.mutation.ClearService()
	return stu
}

// RemoveServiceIDs removes the "service" edge to ServiceTree entities by IDs.
func (stu *ServiceTreeUpdate) RemoveServiceIDs(ids ...int) *ServiceTreeUpdate {
	stu.mutation.RemoveServiceIDs(ids...)
	return stu
}

// RemoveService removes "service" edges to ServiceTree entities.
func (stu *ServiceTreeUpdate) RemoveService(s ...*ServiceTree) *ServiceTreeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveServiceIDs(ids...)
}

// ClearServers clears all "servers" edges to the Server entity.
func (stu *ServiceTreeUpdate) ClearServers() *ServiceTreeUpdate {
	stu.mutation.ClearServers()
	return stu
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (stu *ServiceTreeUpdate) RemoveServerIDs(ids ...int) *ServiceTreeUpdate {
	stu.mutation.RemoveServerIDs(ids...)
	return stu
}

// RemoveServers removes "servers" edges to Server entities.
func (stu *ServiceTreeUpdate) RemoveServers(s ...*Server) *ServiceTreeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveServerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServiceTreeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceTreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServiceTreeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServiceTreeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServiceTreeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServiceTreeUpdate) check() error {
	if v, ok := stu.mutation.GetType(); ok {
		if err := servicetree.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (stu *ServiceTreeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicetree.Table,
			Columns: servicetree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicetree.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetree.FieldName,
		})
	}
	if value, ok := stu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetree.FieldNote,
		})
	}
	if value, ok := stu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servicetree.FieldType,
		})
	}
	if stu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetree.ProjectTable,
			Columns: []string{servicetree.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetree.ProjectTable,
			Columns: []string{servicetree.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedServiceIDs(); len(nodes) > 0 && !stu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedServersIDs(); len(nodes) > 0 && !stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceTreeUpdateOne is the builder for updating a single ServiceTree entity.
type ServiceTreeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceTreeMutation
}

// SetName sets the "name" field.
func (stuo *ServiceTreeUpdateOne) SetName(s string) *ServiceTreeUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetNote sets the "note" field.
func (stuo *ServiceTreeUpdateOne) SetNote(s string) *ServiceTreeUpdateOne {
	stuo.mutation.SetNote(s)
	return stuo
}

// SetType sets the "type" field.
func (stuo *ServiceTreeUpdateOne) SetType(s servicetree.Type) *ServiceTreeUpdateOne {
	stuo.mutation.SetType(s)
	return stuo
}

// SetProjectID sets the "project" edge to the ServiceTree entity by ID.
func (stuo *ServiceTreeUpdateOne) SetProjectID(id int) *ServiceTreeUpdateOne {
	stuo.mutation.SetProjectID(id)
	return stuo
}

// SetNillableProjectID sets the "project" edge to the ServiceTree entity by ID if the given value is not nil.
func (stuo *ServiceTreeUpdateOne) SetNillableProjectID(id *int) *ServiceTreeUpdateOne {
	if id != nil {
		stuo = stuo.SetProjectID(*id)
	}
	return stuo
}

// SetProject sets the "project" edge to the ServiceTree entity.
func (stuo *ServiceTreeUpdateOne) SetProject(s *ServiceTree) *ServiceTreeUpdateOne {
	return stuo.SetProjectID(s.ID)
}

// AddServiceIDs adds the "service" edge to the ServiceTree entity by IDs.
func (stuo *ServiceTreeUpdateOne) AddServiceIDs(ids ...int) *ServiceTreeUpdateOne {
	stuo.mutation.AddServiceIDs(ids...)
	return stuo
}

// AddService adds the "service" edges to the ServiceTree entity.
func (stuo *ServiceTreeUpdateOne) AddService(s ...*ServiceTree) *ServiceTreeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddServiceIDs(ids...)
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (stuo *ServiceTreeUpdateOne) AddServerIDs(ids ...int) *ServiceTreeUpdateOne {
	stuo.mutation.AddServerIDs(ids...)
	return stuo
}

// AddServers adds the "servers" edges to the Server entity.
func (stuo *ServiceTreeUpdateOne) AddServers(s ...*Server) *ServiceTreeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddServerIDs(ids...)
}

// Mutation returns the ServiceTreeMutation object of the builder.
func (stuo *ServiceTreeUpdateOne) Mutation() *ServiceTreeMutation {
	return stuo.mutation
}

// ClearProject clears the "project" edge to the ServiceTree entity.
func (stuo *ServiceTreeUpdateOne) ClearProject() *ServiceTreeUpdateOne {
	stuo.mutation.ClearProject()
	return stuo
}

// ClearService clears all "service" edges to the ServiceTree entity.
func (stuo *ServiceTreeUpdateOne) ClearService() *ServiceTreeUpdateOne {
	stuo.mutation.ClearService()
	return stuo
}

// RemoveServiceIDs removes the "service" edge to ServiceTree entities by IDs.
func (stuo *ServiceTreeUpdateOne) RemoveServiceIDs(ids ...int) *ServiceTreeUpdateOne {
	stuo.mutation.RemoveServiceIDs(ids...)
	return stuo
}

// RemoveService removes "service" edges to ServiceTree entities.
func (stuo *ServiceTreeUpdateOne) RemoveService(s ...*ServiceTree) *ServiceTreeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveServiceIDs(ids...)
}

// ClearServers clears all "servers" edges to the Server entity.
func (stuo *ServiceTreeUpdateOne) ClearServers() *ServiceTreeUpdateOne {
	stuo.mutation.ClearServers()
	return stuo
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (stuo *ServiceTreeUpdateOne) RemoveServerIDs(ids ...int) *ServiceTreeUpdateOne {
	stuo.mutation.RemoveServerIDs(ids...)
	return stuo
}

// RemoveServers removes "servers" edges to Server entities.
func (stuo *ServiceTreeUpdateOne) RemoveServers(s ...*Server) *ServiceTreeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveServerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServiceTreeUpdateOne) Select(field string, fields ...string) *ServiceTreeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServiceTree entity.
func (stuo *ServiceTreeUpdateOne) Save(ctx context.Context) (*ServiceTree, error) {
	var (
		err  error
		node *ServiceTree
	)
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceTreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServiceTreeUpdateOne) SaveX(ctx context.Context) *ServiceTree {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServiceTreeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServiceTreeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServiceTreeUpdateOne) check() error {
	if v, ok := stuo.mutation.GetType(); ok {
		if err := servicetree.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (stuo *ServiceTreeUpdateOne) sqlSave(ctx context.Context) (_node *ServiceTree, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicetree.Table,
			Columns: servicetree.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicetree.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ServiceTree.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicetree.FieldID)
		for _, f := range fields {
			if !servicetree.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicetree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetree.FieldName,
		})
	}
	if value, ok := stuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetree.FieldNote,
		})
	}
	if value, ok := stuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servicetree.FieldType,
		})
	}
	if stuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetree.ProjectTable,
			Columns: []string{servicetree.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetree.ProjectTable,
			Columns: []string{servicetree.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedServiceIDs(); len(nodes) > 0 && !stuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServiceTable,
			Columns: []string{servicetree.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicetree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicetree.ServersTable,
			Columns: []string{servicetree.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceTree{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
