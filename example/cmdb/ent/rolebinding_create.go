// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/rolebinding"
	"cmdb/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleBindingCreate is the builder for creating a RoleBinding entity.
type RoleBindingCreate struct {
	config
	mutation *RoleBindingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rbc *RoleBindingCreate) SetCreateTime(t time.Time) *RoleBindingCreate {
	rbc.mutation.SetCreateTime(t)
	return rbc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rbc *RoleBindingCreate) SetNillableCreateTime(t *time.Time) *RoleBindingCreate {
	if t != nil {
		rbc.SetCreateTime(*t)
	}
	return rbc
}

// SetUpdateTime sets the "update_time" field.
func (rbc *RoleBindingCreate) SetUpdateTime(t time.Time) *RoleBindingCreate {
	rbc.mutation.SetUpdateTime(t)
	return rbc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rbc *RoleBindingCreate) SetNillableUpdateTime(t *time.Time) *RoleBindingCreate {
	if t != nil {
		rbc.SetUpdateTime(*t)
	}
	return rbc
}

// SetRole sets the "role" field.
func (rbc *RoleBindingCreate) SetRole(r rolebinding.Role) *RoleBindingCreate {
	rbc.mutation.SetRole(r)
	return rbc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rbc *RoleBindingCreate) SetUserID(id int) *RoleBindingCreate {
	rbc.mutation.SetUserID(id)
	return rbc
}

// SetUser sets the "user" edge to the User entity.
func (rbc *RoleBindingCreate) SetUser(u *User) *RoleBindingCreate {
	return rbc.SetUserID(u.ID)
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbc *RoleBindingCreate) Mutation() *RoleBindingMutation {
	return rbc.mutation
}

// Save creates the RoleBinding in the database.
func (rbc *RoleBindingCreate) Save(ctx context.Context) (*RoleBinding, error) {
	var (
		err  error
		node *RoleBinding
	)
	rbc.defaults()
	if len(rbc.hooks) == 0 {
		if err = rbc.check(); err != nil {
			return nil, err
		}
		node, err = rbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rbc.check(); err != nil {
				return nil, err
			}
			rbc.mutation = mutation
			node, err = rbc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rbc.hooks) - 1; i >= 0; i-- {
			mut = rbc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rbc *RoleBindingCreate) SaveX(ctx context.Context) *RoleBinding {
	v, err := rbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rbc *RoleBindingCreate) defaults() {
	if _, ok := rbc.mutation.CreateTime(); !ok {
		v := rolebinding.DefaultCreateTime()
		rbc.mutation.SetCreateTime(v)
	}
	if _, ok := rbc.mutation.UpdateTime(); !ok {
		v := rolebinding.DefaultUpdateTime()
		rbc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rbc *RoleBindingCreate) check() error {
	if _, ok := rbc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rbc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rbc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New("ent: missing required field \"role\"")}
	}
	if v, ok := rbc.mutation.Role(); ok {
		if err := rolebinding.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if _, ok := rbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (rbc *RoleBindingCreate) sqlSave(ctx context.Context) (*RoleBinding, error) {
	_node, _spec := rbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rbc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rbc *RoleBindingCreate) createSpec() (*RoleBinding, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleBinding{config: rbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rolebinding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		}
	)
	if value, ok := rbc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolebinding.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rbc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolebinding.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rbc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: rolebinding.FieldRole,
		})
		_node.Role = value
	}
	if nodes := rbc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.UserTable,
			Columns: []string{rolebinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_role_bind = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleBindingCreateBulk is the builder for creating many RoleBinding entities in bulk.
type RoleBindingCreateBulk struct {
	config
	builders []*RoleBindingCreate
}

// Save creates the RoleBinding entities in the database.
func (rbcb *RoleBindingCreateBulk) Save(ctx context.Context) ([]*RoleBinding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rbcb.builders))
	nodes := make([]*RoleBinding, len(rbcb.builders))
	mutators := make([]Mutator, len(rbcb.builders))
	for i := range rbcb.builders {
		func(i int, root context.Context) {
			builder := rbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleBindingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rbcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rbcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rbcb *RoleBindingCreateBulk) SaveX(ctx context.Context) []*RoleBinding {
	v, err := rbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
