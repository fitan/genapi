// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/rolebinding"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RoleBinding is the model entity for the RoleBinding schema.
type RoleBinding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleName holds the value of the "role_name" field.
	RoleName string `json:"role_name,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID string `json:"role_id,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Permissions holds the value of the "permissions" field.
	Permissions    []string `json:"permissions,omitempty"`
	user_role_bind *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleBinding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolebinding.FieldPermissions:
			values[i] = new([]byte)
		case rolebinding.FieldStatus:
			values[i] = new(sql.NullBool)
		case rolebinding.FieldID:
			values[i] = new(sql.NullInt64)
		case rolebinding.FieldRoleName, rolebinding.FieldRoleID, rolebinding.FieldNote:
			values[i] = new(sql.NullString)
		case rolebinding.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case rolebinding.ForeignKeys[0]: // user_role_bind
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RoleBinding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleBinding fields.
func (rb *RoleBinding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolebinding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rb.ID = int(value.Int64)
		case rolebinding.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				rb.RoleName = value.String
			}
		case rolebinding.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				rb.RoleID = value.String
			}
		case rolebinding.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rb.Status = value.Bool
			}
		case rolebinding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rb.CreatedAt = new(time.Time)
				*rb.CreatedAt = value.Time
			}
		case rolebinding.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				rb.Note = value.String
			}
		case rolebinding.FieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rb.Permissions); err != nil {
					return fmt.Errorf("unmarshal field permissions: %w", err)
				}
			}
		case rolebinding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_role_bind", value)
			} else if value.Valid {
				rb.user_role_bind = new(int)
				*rb.user_role_bind = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RoleBinding.
// Note that you need to call RoleBinding.Unwrap() before calling this method if this RoleBinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (rb *RoleBinding) Update() *RoleBindingUpdateOne {
	return (&RoleBindingClient{config: rb.config}).UpdateOne(rb)
}

// Unwrap unwraps the RoleBinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rb *RoleBinding) Unwrap() *RoleBinding {
	tx, ok := rb.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleBinding is not a transactional entity")
	}
	rb.config.driver = tx.drv
	return rb
}

// String implements the fmt.Stringer.
func (rb *RoleBinding) String() string {
	var builder strings.Builder
	builder.WriteString("RoleBinding(")
	builder.WriteString(fmt.Sprintf("id=%v", rb.ID))
	builder.WriteString(", role_name=")
	builder.WriteString(rb.RoleName)
	builder.WriteString(", role_id=")
	builder.WriteString(rb.RoleID)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", rb.Status))
	if v := rb.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", note=")
	builder.WriteString(rb.Note)
	builder.WriteString(", permissions=")
	builder.WriteString(fmt.Sprintf("%v", rb.Permissions))
	builder.WriteByte(')')
	return builder.String()
}

// RoleBindings is a parsable slice of RoleBinding.
type RoleBindings []*RoleBinding

func (rb RoleBindings) config(cfg config) {
	for _i := range rb {
		rb[_i].config = cfg
	}
}
