// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/rolebinding"
	"cmdb/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RoleBinding is the model entity for the RoleBinding schema.
type RoleBinding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Role holds the value of the "role" field.
	Role rolebinding.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleBindingQuery when eager-loading is set.
	Edges          RoleBindingEdges `json:"edges"`
	user_role_bind *int
}

// RoleBindingEdges holds the relations/edges for other nodes in the graph.
type RoleBindingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleBindingEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleBinding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolebinding.FieldID:
			values[i] = &sql.NullInt64{}
		case rolebinding.FieldRole:
			values[i] = &sql.NullString{}
		case rolebinding.FieldCreateTime, rolebinding.FieldUpdateTime:
			values[i] = &sql.NullTime{}
		case rolebinding.ForeignKeys[0]: // user_role_bind
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type RoleBinding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleBinding fields.
func (rb *RoleBinding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolebinding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rb.ID = int(value.Int64)
		case rolebinding.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rb.CreateTime = value.Time
			}
		case rolebinding.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				rb.UpdateTime = value.Time
			}
		case rolebinding.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				rb.Role = rolebinding.Role(value.String)
			}
		case rolebinding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_role_bind", value)
			} else if value.Valid {
				rb.user_role_bind = new(int)
				*rb.user_role_bind = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the RoleBinding entity.
func (rb *RoleBinding) QueryUser() *UserQuery {
	return (&RoleBindingClient{config: rb.config}).QueryUser(rb)
}

// Update returns a builder for updating this RoleBinding.
// Note that you need to call RoleBinding.Unwrap() before calling this method if this RoleBinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (rb *RoleBinding) Update() *RoleBindingUpdateOne {
	return (&RoleBindingClient{config: rb.config}).UpdateOne(rb)
}

// Unwrap unwraps the RoleBinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rb *RoleBinding) Unwrap() *RoleBinding {
	tx, ok := rb.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleBinding is not a transactional entity")
	}
	rb.config.driver = tx.drv
	return rb
}

// String implements the fmt.Stringer.
func (rb *RoleBinding) String() string {
	var builder strings.Builder
	builder.WriteString("RoleBinding(")
	builder.WriteString(fmt.Sprintf("id=%v", rb.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rb.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rb.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", rb.Role))
	builder.WriteByte(')')
	return builder.String()
}

// RoleBindings is a parsable slice of RoleBinding.
type RoleBindings []*RoleBinding

func (rb RoleBindings) config(cfg config) {
	for _i := range rb {
		rb[_i].config = cfg
	}
}
