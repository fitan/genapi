// Code generated by entc, DO NOT EDIT.

package servicetree

import (
	"fmt"
)

const (
	// Label holds the string label denoting the servicetree type in the database.
	Label = "service_tree"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeServers holds the string denoting the servers edge name in mutations.
	EdgeServers = "servers"
	// Table holds the table name of the servicetree in the database.
	Table = "service_trees"
	// ProjectTable is the table the holds the project relation/edge.
	ProjectTable = "service_trees"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "service_tree_service"
	// ServiceTable is the table the holds the service relation/edge.
	ServiceTable = "service_trees"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_tree_service"
	// ServersTable is the table the holds the servers relation/edge.
	ServersTable = "servers"
	// ServersInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	ServersInverseTable = "servers"
	// ServersColumn is the table column denoting the servers relation/edge.
	ServersColumn = "service_tree_servers"
)

// Columns holds all SQL columns for servicetree fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNote,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_trees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_tree_service",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeProject Type = "project"
	TypeService Type = "service"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeProject, TypeService:
		return nil
	default:
		return fmt.Errorf("servicetree: invalid enum value for type field: %q", _type)
	}
}
