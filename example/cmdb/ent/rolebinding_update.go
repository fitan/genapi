// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/predicate"
	"cmdb/ent/rolebinding"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleBindingUpdate is the builder for updating RoleBinding entities.
type RoleBindingUpdate struct {
	config
	hooks    []Hook
	mutation *RoleBindingMutation
}

// Where appends a list predicates to the RoleBindingUpdate builder.
func (rbu *RoleBindingUpdate) Where(ps ...predicate.RoleBinding) *RoleBindingUpdate {
	rbu.mutation.Where(ps...)
	return rbu
}

// SetRoleName sets the "role_name" field.
func (rbu *RoleBindingUpdate) SetRoleName(s string) *RoleBindingUpdate {
	rbu.mutation.SetRoleName(s)
	return rbu
}

// SetRoleID sets the "role_id" field.
func (rbu *RoleBindingUpdate) SetRoleID(s string) *RoleBindingUpdate {
	rbu.mutation.SetRoleID(s)
	return rbu
}

// SetStatus sets the "status" field.
func (rbu *RoleBindingUpdate) SetStatus(b bool) *RoleBindingUpdate {
	rbu.mutation.SetStatus(b)
	return rbu
}

// SetNote sets the "note" field.
func (rbu *RoleBindingUpdate) SetNote(s string) *RoleBindingUpdate {
	rbu.mutation.SetNote(s)
	return rbu
}

// SetPermissions sets the "permissions" field.
func (rbu *RoleBindingUpdate) SetPermissions(s []string) *RoleBindingUpdate {
	rbu.mutation.SetPermissions(s)
	return rbu
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbu *RoleBindingUpdate) Mutation() *RoleBindingMutation {
	return rbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rbu *RoleBindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rbu.hooks) == 0 {
		affected, err = rbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rbu.mutation = mutation
			affected, err = rbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rbu.hooks) - 1; i >= 0; i-- {
			if rbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rbu *RoleBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := rbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rbu *RoleBindingUpdate) Exec(ctx context.Context) error {
	_, err := rbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbu *RoleBindingUpdate) ExecX(ctx context.Context) {
	if err := rbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rbu *RoleBindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolebinding.Table,
			Columns: rolebinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		},
	}
	if ps := rbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbu.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldRoleName,
		})
	}
	if value, ok := rbu.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldRoleID,
		})
	}
	if value, ok := rbu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rolebinding.FieldStatus,
		})
	}
	if value, ok := rbu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldNote,
		})
	}
	if value, ok := rbu.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rolebinding.FieldPermissions,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RoleBindingUpdateOne is the builder for updating a single RoleBinding entity.
type RoleBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleBindingMutation
}

// SetRoleName sets the "role_name" field.
func (rbuo *RoleBindingUpdateOne) SetRoleName(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetRoleName(s)
	return rbuo
}

// SetRoleID sets the "role_id" field.
func (rbuo *RoleBindingUpdateOne) SetRoleID(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetRoleID(s)
	return rbuo
}

// SetStatus sets the "status" field.
func (rbuo *RoleBindingUpdateOne) SetStatus(b bool) *RoleBindingUpdateOne {
	rbuo.mutation.SetStatus(b)
	return rbuo
}

// SetNote sets the "note" field.
func (rbuo *RoleBindingUpdateOne) SetNote(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetNote(s)
	return rbuo
}

// SetPermissions sets the "permissions" field.
func (rbuo *RoleBindingUpdateOne) SetPermissions(s []string) *RoleBindingUpdateOne {
	rbuo.mutation.SetPermissions(s)
	return rbuo
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbuo *RoleBindingUpdateOne) Mutation() *RoleBindingMutation {
	return rbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rbuo *RoleBindingUpdateOne) Select(field string, fields ...string) *RoleBindingUpdateOne {
	rbuo.fields = append([]string{field}, fields...)
	return rbuo
}

// Save executes the query and returns the updated RoleBinding entity.
func (rbuo *RoleBindingUpdateOne) Save(ctx context.Context) (*RoleBinding, error) {
	var (
		err  error
		node *RoleBinding
	)
	if len(rbuo.hooks) == 0 {
		node, err = rbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rbuo.mutation = mutation
			node, err = rbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rbuo.hooks) - 1; i >= 0; i-- {
			if rbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) SaveX(ctx context.Context) *RoleBinding {
	node, err := rbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rbuo *RoleBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := rbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) ExecX(ctx context.Context) {
	if err := rbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rbuo *RoleBindingUpdateOne) sqlSave(ctx context.Context) (_node *RoleBinding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolebinding.Table,
			Columns: rolebinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		},
	}
	id, ok := rbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RoleBinding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolebinding.FieldID)
		for _, f := range fields {
			if !rolebinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolebinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbuo.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldRoleName,
		})
	}
	if value, ok := rbuo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldRoleID,
		})
	}
	if value, ok := rbuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rolebinding.FieldStatus,
		})
	}
	if value, ok := rbuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolebinding.FieldNote,
		})
	}
	if value, ok := rbuo.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rolebinding.FieldPermissions,
		})
	}
	_node = &RoleBinding{config: rbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
