// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/predicate"
	"cmdb/ent/project"
	"cmdb/ent/rolebinding"
	"cmdb/ent/service"
	"cmdb/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleBindingUpdate is the builder for updating RoleBinding entities.
type RoleBindingUpdate struct {
	config
	hooks    []Hook
	mutation *RoleBindingMutation
}

// Where adds a new predicate for the RoleBindingUpdate builder.
func (rbu *RoleBindingUpdate) Where(ps ...predicate.RoleBinding) *RoleBindingUpdate {
	rbu.mutation.predicates = append(rbu.mutation.predicates, ps...)
	return rbu
}

// SetRole sets the "role" field.
func (rbu *RoleBindingUpdate) SetRole(r rolebinding.Role) *RoleBindingUpdate {
	rbu.mutation.SetRole(r)
	return rbu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (rbu *RoleBindingUpdate) SetProjectID(id int) *RoleBindingUpdate {
	rbu.mutation.SetProjectID(id)
	return rbu
}

// SetProject sets the "project" edge to the Project entity.
func (rbu *RoleBindingUpdate) SetProject(p *Project) *RoleBindingUpdate {
	return rbu.SetProjectID(p.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (rbu *RoleBindingUpdate) SetServiceID(id int) *RoleBindingUpdate {
	rbu.mutation.SetServiceID(id)
	return rbu
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableServiceID(id *int) *RoleBindingUpdate {
	if id != nil {
		rbu = rbu.SetServiceID(*id)
	}
	return rbu
}

// SetService sets the "service" edge to the Service entity.
func (rbu *RoleBindingUpdate) SetService(s *Service) *RoleBindingUpdate {
	return rbu.SetServiceID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rbu *RoleBindingUpdate) SetUserID(id int) *RoleBindingUpdate {
	rbu.mutation.SetUserID(id)
	return rbu
}

// SetUser sets the "user" edge to the User entity.
func (rbu *RoleBindingUpdate) SetUser(u *User) *RoleBindingUpdate {
	return rbu.SetUserID(u.ID)
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbu *RoleBindingUpdate) Mutation() *RoleBindingMutation {
	return rbu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (rbu *RoleBindingUpdate) ClearProject() *RoleBindingUpdate {
	rbu.mutation.ClearProject()
	return rbu
}

// ClearService clears the "service" edge to the Service entity.
func (rbu *RoleBindingUpdate) ClearService() *RoleBindingUpdate {
	rbu.mutation.ClearService()
	return rbu
}

// ClearUser clears the "user" edge to the User entity.
func (rbu *RoleBindingUpdate) ClearUser() *RoleBindingUpdate {
	rbu.mutation.ClearUser()
	return rbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rbu *RoleBindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rbu.defaults()
	if len(rbu.hooks) == 0 {
		if err = rbu.check(); err != nil {
			return 0, err
		}
		affected, err = rbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rbu.check(); err != nil {
				return 0, err
			}
			rbu.mutation = mutation
			affected, err = rbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rbu.hooks) - 1; i >= 0; i-- {
			mut = rbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rbu *RoleBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := rbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rbu *RoleBindingUpdate) Exec(ctx context.Context) error {
	_, err := rbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbu *RoleBindingUpdate) ExecX(ctx context.Context) {
	if err := rbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbu *RoleBindingUpdate) defaults() {
	if _, ok := rbu.mutation.UpdateTime(); !ok {
		v := rolebinding.UpdateDefaultUpdateTime()
		rbu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rbu *RoleBindingUpdate) check() error {
	if v, ok := rbu.mutation.Role(); ok {
		if err := rolebinding.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if _, ok := rbu.mutation.ProjectID(); rbu.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	if _, ok := rbu.mutation.UserID(); rbu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (rbu *RoleBindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolebinding.Table,
			Columns: rolebinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		},
	}
	if ps := rbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolebinding.FieldUpdateTime,
		})
	}
	if value, ok := rbu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: rolebinding.FieldRole,
		})
	}
	if rbu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ProjectTable,
			Columns: []string{rolebinding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ProjectTable,
			Columns: []string{rolebinding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rbu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ServiceTable,
			Columns: []string{rolebinding.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ServiceTable,
			Columns: []string{rolebinding.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rbu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.UserTable,
			Columns: []string{rolebinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.UserTable,
			Columns: []string{rolebinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoleBindingUpdateOne is the builder for updating a single RoleBinding entity.
type RoleBindingUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoleBindingMutation
}

// SetRole sets the "role" field.
func (rbuo *RoleBindingUpdateOne) SetRole(r rolebinding.Role) *RoleBindingUpdateOne {
	rbuo.mutation.SetRole(r)
	return rbuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (rbuo *RoleBindingUpdateOne) SetProjectID(id int) *RoleBindingUpdateOne {
	rbuo.mutation.SetProjectID(id)
	return rbuo
}

// SetProject sets the "project" edge to the Project entity.
func (rbuo *RoleBindingUpdateOne) SetProject(p *Project) *RoleBindingUpdateOne {
	return rbuo.SetProjectID(p.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (rbuo *RoleBindingUpdateOne) SetServiceID(id int) *RoleBindingUpdateOne {
	rbuo.mutation.SetServiceID(id)
	return rbuo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableServiceID(id *int) *RoleBindingUpdateOne {
	if id != nil {
		rbuo = rbuo.SetServiceID(*id)
	}
	return rbuo
}

// SetService sets the "service" edge to the Service entity.
func (rbuo *RoleBindingUpdateOne) SetService(s *Service) *RoleBindingUpdateOne {
	return rbuo.SetServiceID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rbuo *RoleBindingUpdateOne) SetUserID(id int) *RoleBindingUpdateOne {
	rbuo.mutation.SetUserID(id)
	return rbuo
}

// SetUser sets the "user" edge to the User entity.
func (rbuo *RoleBindingUpdateOne) SetUser(u *User) *RoleBindingUpdateOne {
	return rbuo.SetUserID(u.ID)
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbuo *RoleBindingUpdateOne) Mutation() *RoleBindingMutation {
	return rbuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (rbuo *RoleBindingUpdateOne) ClearProject() *RoleBindingUpdateOne {
	rbuo.mutation.ClearProject()
	return rbuo
}

// ClearService clears the "service" edge to the Service entity.
func (rbuo *RoleBindingUpdateOne) ClearService() *RoleBindingUpdateOne {
	rbuo.mutation.ClearService()
	return rbuo
}

// ClearUser clears the "user" edge to the User entity.
func (rbuo *RoleBindingUpdateOne) ClearUser() *RoleBindingUpdateOne {
	rbuo.mutation.ClearUser()
	return rbuo
}

// Save executes the query and returns the updated RoleBinding entity.
func (rbuo *RoleBindingUpdateOne) Save(ctx context.Context) (*RoleBinding, error) {
	var (
		err  error
		node *RoleBinding
	)
	rbuo.defaults()
	if len(rbuo.hooks) == 0 {
		if err = rbuo.check(); err != nil {
			return nil, err
		}
		node, err = rbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleBindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rbuo.check(); err != nil {
				return nil, err
			}
			rbuo.mutation = mutation
			node, err = rbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rbuo.hooks) - 1; i >= 0; i-- {
			mut = rbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) SaveX(ctx context.Context) *RoleBinding {
	node, err := rbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rbuo *RoleBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := rbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) ExecX(ctx context.Context) {
	if err := rbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbuo *RoleBindingUpdateOne) defaults() {
	if _, ok := rbuo.mutation.UpdateTime(); !ok {
		v := rolebinding.UpdateDefaultUpdateTime()
		rbuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rbuo *RoleBindingUpdateOne) check() error {
	if v, ok := rbuo.mutation.Role(); ok {
		if err := rolebinding.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if _, ok := rbuo.mutation.ProjectID(); rbuo.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	if _, ok := rbuo.mutation.UserID(); rbuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (rbuo *RoleBindingUpdateOne) sqlSave(ctx context.Context) (_node *RoleBinding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolebinding.Table,
			Columns: rolebinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolebinding.FieldID,
			},
		},
	}
	id, ok := rbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RoleBinding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := rbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolebinding.FieldUpdateTime,
		})
	}
	if value, ok := rbuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: rolebinding.FieldRole,
		})
	}
	if rbuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ProjectTable,
			Columns: []string{rolebinding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ProjectTable,
			Columns: []string{rolebinding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rbuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ServiceTable,
			Columns: []string{rolebinding.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.ServiceTable,
			Columns: []string{rolebinding.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rbuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.UserTable,
			Columns: []string{rolebinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rbuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolebinding.UserTable,
			Columns: []string{rolebinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoleBinding{config: rbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
