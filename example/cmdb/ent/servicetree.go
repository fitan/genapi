// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cmdb/ent/servicetree"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ServiceTree is the model entity for the ServiceTree schema.
type ServiceTree struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Type holds the value of the "type" field.
	Type servicetree.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceTreeQuery when eager-loading is set.
	Edges                ServiceTreeEdges `json:"edges"`
	service_tree_service *int
}

// ServiceTreeEdges holds the relations/edges for other nodes in the graph.
type ServiceTreeEdges struct {
	// Project holds the value of the project edge.
	Project *ServiceTree `json:"project,omitempty"`
	// Service holds the value of the service edge.
	Service []*ServiceTree `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceTreeEdges) ProjectOrErr() (*ServiceTree, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: servicetree.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceTreeEdges) ServiceOrErr() ([]*ServiceTree, error) {
	if e.loadedTypes[1] {
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceTree) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicetree.FieldID:
			values[i] = &sql.NullInt64{}
		case servicetree.FieldName, servicetree.FieldNote, servicetree.FieldType:
			values[i] = &sql.NullString{}
		case servicetree.ForeignKeys[0]: // service_tree_service
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceTree", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceTree fields.
func (st *ServiceTree) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicetree.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case servicetree.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case servicetree.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				st.Note = value.String
			}
		case servicetree.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				st.Type = servicetree.Type(value.String)
			}
		case servicetree.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field service_tree_service", value)
			} else if value.Valid {
				st.service_tree_service = new(int)
				*st.service_tree_service = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ServiceTree entity.
func (st *ServiceTree) QueryProject() *ServiceTreeQuery {
	return (&ServiceTreeClient{config: st.config}).QueryProject(st)
}

// QueryService queries the "service" edge of the ServiceTree entity.
func (st *ServiceTree) QueryService() *ServiceTreeQuery {
	return (&ServiceTreeClient{config: st.config}).QueryService(st)
}

// Update returns a builder for updating this ServiceTree.
// Note that you need to call ServiceTree.Unwrap() before calling this method if this ServiceTree
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServiceTree) Update() *ServiceTreeUpdateOne {
	return (&ServiceTreeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the ServiceTree entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ServiceTree) Unwrap() *ServiceTree {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceTree is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServiceTree) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceTree(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", name=")
	builder.WriteString(st.Name)
	builder.WriteString(", note=")
	builder.WriteString(st.Note)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", st.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceTrees is a parsable slice of ServiceTree.
type ServiceTrees []*ServiceTree

func (st ServiceTrees) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
