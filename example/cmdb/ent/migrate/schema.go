// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlertsColumns holds the columns for the "alerts" table.
	AlertsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "user_alerts", Type: field.TypeInt, Nullable: true},
	}
	// AlertsTable holds the schema information for the "alerts" table.
	AlertsTable = &schema.Table{
		Name:       "alerts",
		Columns:    AlertsColumns,
		PrimaryKey: []*schema.Column{AlertsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "alerts_users_alerts",
				Columns:    []*schema.Column{AlertsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:        "projects",
		Columns:     ProjectsColumns,
		PrimaryKey:  []*schema.Column{ProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RoleBindingsColumns holds the columns for the "role_bindings" table.
	RoleBindingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"admin", "user"}},
		{Name: "project_role_bindings", Type: field.TypeInt, Nullable: true},
		{Name: "service_role_bindings", Type: field.TypeInt, Nullable: true},
		{Name: "user_role_bindings", Type: field.TypeInt, Nullable: true},
	}
	// RoleBindingsTable holds the schema information for the "role_bindings" table.
	RoleBindingsTable = &schema.Table{
		Name:       "role_bindings",
		Columns:    RoleBindingsColumns,
		PrimaryKey: []*schema.Column{RoleBindingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_bindings_projects_role_bindings",
				Columns:    []*schema.Column{RoleBindingsColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "role_bindings_services_role_bindings",
				Columns:    []*schema.Column{RoleBindingsColumns[5]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "role_bindings_users_role_bindings",
				Columns:    []*schema.Column{RoleBindingsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ServersColumns holds the columns for the "servers" table.
	ServersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "ip", Type: field.TypeString},
		{Name: "machine_type", Type: field.TypeEnum, Enums: []string{"physical", "virtual"}},
		{Name: "platform_type", Type: field.TypeEnum, Enums: []string{"zstack", "k8s", "openstack"}},
		{Name: "system_type", Type: field.TypeEnum, Enums: []string{"linux", "windows"}},
	}
	// ServersTable holds the schema information for the "servers" table.
	ServersTable = &schema.Table{
		Name:        "servers",
		Columns:     ServersColumns,
		PrimaryKey:  []*schema.Column{ServersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "project_services", Type: field.TypeInt, Nullable: true},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:       "services",
		Columns:    ServicesColumns,
		PrimaryKey: []*schema.Column{ServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "services_projects_services",
				Columns:    []*schema.Column{ServicesColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin", "tourist"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ServiceServersColumns holds the columns for the "service_servers" table.
	ServiceServersColumns = []*schema.Column{
		{Name: "service_id", Type: field.TypeInt},
		{Name: "server_id", Type: field.TypeInt},
	}
	// ServiceServersTable holds the schema information for the "service_servers" table.
	ServiceServersTable = &schema.Table{
		Name:       "service_servers",
		Columns:    ServiceServersColumns,
		PrimaryKey: []*schema.Column{ServiceServersColumns[0], ServiceServersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_servers_service_id",
				Columns:    []*schema.Column{ServiceServersColumns[0]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "service_servers_server_id",
				Columns:    []*schema.Column{ServiceServersColumns[1]},
				RefColumns: []*schema.Column{ServersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlertsTable,
		ProjectsTable,
		RoleBindingsTable,
		ServersTable,
		ServicesTable,
		UsersTable,
		ServiceServersTable,
	}
)

func init() {
	AlertsTable.ForeignKeys[0].RefTable = UsersTable
	RoleBindingsTable.ForeignKeys[0].RefTable = ProjectsTable
	RoleBindingsTable.ForeignKeys[1].RefTable = ServicesTable
	RoleBindingsTable.ForeignKeys[2].RefTable = UsersTable
	ServicesTable.ForeignKeys[0].RefTable = ProjectsTable
	ServiceServersTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceServersTable.ForeignKeys[1].RefTable = ServersTable
}
