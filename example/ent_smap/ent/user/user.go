// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAge1 holds the string denoting the age1 field in the database.
	FieldAge1 = "age1"
	// FieldEn holds the string denoting the en field in the database.
	FieldEn = "en"

	// EdgeCars holds the string denoting the cars edge name in mutations.
	EdgeCars = "cars"

	// Table holds the table name of the user in the database.
	Table = "users"
	// CarsTable is the table the holds the cars relation/edge.
	CarsTable = "cars"
	// CarsInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarsInverseTable = "cars"
	// CarsColumn is the table column denoting the cars relation/edge.
	CarsColumn = "user_cars"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAge1,
	FieldEn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// En defines the type for the "en" enum field.
type En string

// En values.
const (
	En1 En = "1"
	En2 En = "2"
	En3 En = "3"
)

func (e En) String() string {
	return string(e)
}

// EnValidator is a validator for the "en" field enum values. It is called by the builders before save.
func EnValidator(e En) error {
	switch e {
	case En1, En2, En3:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for en field: %q", e)
	}
}
