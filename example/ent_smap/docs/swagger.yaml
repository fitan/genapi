definitions:
  api_models.UserOut:
    properties:
      len:
        type: integer
      user:
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.Car:
    properties:
      id:
        description: ID of the ent.
        type: integer
      model:
        description: Model holds the value of the "model" field.
        type: string
      registered_at:
        description: RegisteredAt holds the value of the "registered_at" field.
        type: string
    type: object
  ent.User:
    properties:
      age1:
        description: Age1 holds the value of the "age1" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
      en:
        description: En holds the value of the "en" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      cars:
        description: Cars holds the value of the cars edge.
        items:
          $ref: '#/definitions/ent.Car'
        type: array
    type: object
  entt.CarNode:
    properties:
      id:
        type: integer
      model:
        type: string
      registered_at:
        format: date-time
        type: string
    type: object
  entt.CarNodeNotID:
    properties:
      model:
        type: string
      registered_at:
        format: date-time
        type: string
    type: object
  entt.GetCarListData:
    properties:
      count:
        type: integer
      result:
        items:
          $ref: '#/definitions/ent.Car'
        type: array
    type: object
  entt.GetUserListData:
    properties:
      count:
        type: integer
      result:
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  entt.RestReturn:
    properties:
      code:
        type: integer
      data:
        type: object
      msg:
        type: object
    type: object
  entt.UserNode:
    properties:
      age1:
        type: integer
      en:
        enum:
        - "1"
        - "2"
        - "3"
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  entt.UserNodeNotID:
    properties:
      age1:
        type: integer
      en:
        enum:
        - "1"
        - "2"
        - "3"
        type: string
      name:
        type: string
    type: object
  router.Result:
    properties:
      code:
        type: integer
      data:
        type: object
      err:
        type: string
    type: object
info:
  contact: {}
paths:
  /car:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entt.CarNodeNotID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: create one car
      tags:
      - Car
  /car/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: delete one car
      tags:
      - Car
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: get one car
      tags:
      - Car
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entt.CarNodeNotID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: update one car
      tags:
      - Car
  /cars:
    delete:
      consumes:
      - application/json
      parameters:
      - in: query
        items:
          type: integer
        name: ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: delete list car
      tags:
      - Car
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.GetCarListData'
              type: object
      summary: get list car
      tags:
      - Car
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entt.CarNode'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entt.CarNodeNotID'
                  type: array
              type: object
      summary: create list car
      tags:
      - Car
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entt.CarNode'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: update list car
      tags:
      - Car
  /genapi/car:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: eq_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/router.Result'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
  /genapi/user:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: eq_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/router.Result'
            - properties:
                data:
                  $ref: '#/definitions/api_models.UserOut'
              type: object
  /user:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entt.UserNodeNotID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: create one user
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: delete one user
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: get one user
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entt.UserNodeNotID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: update one user
      tags:
      - User
  /user/{id}/cars:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.CarNode'
              type: object
      summary: delete one car
      tags:
      - Car by User
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entt.CarNode'
                  type: array
              type: object
      summary: get list car
      tags:
      - Car by User
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entt.CarNodeNotID'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entt.CarNodeNotID'
                  type: array
              type: object
      summary: create list car
      tags:
      - Car by User
  /users:
    delete:
      consumes:
      - application/json
      parameters:
      - in: query
        items:
          type: integer
        name: ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: delete list user
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: eq_age1
        type: integer
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.GetUserListData'
              type: object
      summary: get list user
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entt.UserNode'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entt.UserNodeNotID'
                  type: array
              type: object
      summary: create list user
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entt.UserNode'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entt.RestReturn'
            - properties:
                data:
                  $ref: '#/definitions/entt.UserNode'
              type: object
      summary: update list user
      tags:
      - User
swagger: "2.0"
